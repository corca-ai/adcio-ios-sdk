//
// EventsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class EventsAPI {

    /**
     
     
     - parameter trackAddToCartRequestDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsControllerOnAddToCart(trackAddToCartRequestDto: TrackAddToCartRequestDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TrackResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsControllerOnAddToCartWithRequestBuilder(trackAddToCartRequestDto: trackAddToCartRequestDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     
     - POST /events/add-to-cart
     - Log when the customer adds a product to the cart.
     - parameter trackAddToCartRequestDto: (body)  
     - returns: RequestBuilder<TrackResponseDto> 
     */
    open class func eventsControllerOnAddToCartWithRequestBuilder(trackAddToCartRequestDto: TrackAddToCartRequestDto) -> RequestBuilder<TrackResponseDto> {
        let localVariablePath = "/events/add-to-cart"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: trackAddToCartRequestDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TrackResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     
     
     - parameter trackClickRequestDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsControllerOnClick(trackClickRequestDto: TrackClickRequestDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TrackResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsControllerOnClickWithRequestBuilder(trackClickRequestDto: trackClickRequestDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     
     - POST /events/click
     - Log a click.
     - parameter trackClickRequestDto: (body)  
     - returns: RequestBuilder<TrackResponseDto> 
     */
    open class func eventsControllerOnClickWithRequestBuilder(trackClickRequestDto: TrackClickRequestDto) -> RequestBuilder<TrackResponseDto> {
        let localVariablePath = "/events/click"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: trackClickRequestDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TrackResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     
     
     - parameter trackImpressionRequestDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsControllerOnImpression(trackImpressionRequestDto: TrackImpressionRequestDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TrackResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsControllerOnImpressionWithRequestBuilder(trackImpressionRequestDto: trackImpressionRequestDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     
     - POST /events/impression
     - Log an impression.
     - parameter trackImpressionRequestDto: (body)  
     - returns: RequestBuilder<TrackResponseDto> 
     */
    open class func eventsControllerOnImpressionWithRequestBuilder(trackImpressionRequestDto: TrackImpressionRequestDto) -> RequestBuilder<TrackResponseDto> {
        let localVariablePath = "/events/impression"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: trackImpressionRequestDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TrackResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     
     
     - parameter trackPageViewRequestDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsControllerOnPageView(trackPageViewRequestDto: TrackPageViewRequestDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TrackResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsControllerOnPageViewWithRequestBuilder(trackPageViewRequestDto: trackPageViewRequestDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     
     - POST /events/view
     - Log when the customer views a specific product / category page.
     - parameter trackPageViewRequestDto: (body)  
     - returns: RequestBuilder<TrackResponseDto> 
     */
    open class func eventsControllerOnPageViewWithRequestBuilder(trackPageViewRequestDto: TrackPageViewRequestDto) -> RequestBuilder<TrackResponseDto> {
        let localVariablePath = "/events/view"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: trackPageViewRequestDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TrackResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     
     
     - parameter trackPurchaseRequestDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsControllerOnPurchase(trackPurchaseRequestDto: TrackPurchaseRequestDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TrackResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsControllerOnPurchaseWithRequestBuilder(trackPurchaseRequestDto: trackPurchaseRequestDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     
     - POST /events/purchase
     - Log when the customer purchases a product.
     - parameter trackPurchaseRequestDto: (body)  
     - returns: RequestBuilder<TrackResponseDto> 
     */
    open class func eventsControllerOnPurchaseWithRequestBuilder(trackPurchaseRequestDto: TrackPurchaseRequestDto) -> RequestBuilder<TrackResponseDto> {
        let localVariablePath = "/events/purchase"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: trackPurchaseRequestDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TrackResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
