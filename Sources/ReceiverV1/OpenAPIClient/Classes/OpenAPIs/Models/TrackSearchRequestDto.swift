//
// TrackSearchRequestDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TrackSearchRequestDto: Codable, JSONEncodable, Hashable {

    /** ADCIO Client ID of the store. */
    public var storeId: String
    /** The session starts when the customer visits the store. It persists until the customer closes the tab, browser or app. */
    public var sessionId: String
    /** The device identifier should be unique for each device. A customer can have multiple devices. */
    public var deviceId: String
    /** The customer identifier which is generated and managed by the store. The store should configure `frontApi` parameter of ADCIO SDK so that the `customerId` can be sent to ADCIO API. */
    public var customerId: String?
    /** The version of the SDK */
    public var sdkVersion: String?
    /** The search query. */
    public var query: String
    /** Whether the search query found any results. */
    public var found: Bool?
    /** The pathname of the search page. */
    public var pathname: String?
    public var userAgent: String?
    public var appVersion: String?

    public init(storeId: String, sessionId: String, deviceId: String, customerId: String? = nil, sdkVersion: String? = nil, query: String, found: Bool? = nil, pathname: String? = nil, userAgent: String? = nil, appVersion: String? = nil) {
        self.storeId = storeId
        self.sessionId = sessionId
        self.deviceId = deviceId
        self.customerId = customerId
        self.sdkVersion = sdkVersion
        self.query = query
        self.found = found
        self.pathname = pathname
        self.userAgent = userAgent
        self.appVersion = appVersion
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case storeId
        case sessionId
        case deviceId
        case customerId
        case sdkVersion
        case query
        case found
        case pathname
        case userAgent
        case appVersion
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(storeId, forKey: .storeId)
        try container.encode(sessionId, forKey: .sessionId)
        try container.encode(deviceId, forKey: .deviceId)
        try container.encodeIfPresent(customerId, forKey: .customerId)
        try container.encodeIfPresent(sdkVersion, forKey: .sdkVersion)
        try container.encode(query, forKey: .query)
        try container.encodeIfPresent(found, forKey: .found)
        try container.encodeIfPresent(pathname, forKey: .pathname)
        try container.encodeIfPresent(userAgent, forKey: .userAgent)
        try container.encodeIfPresent(appVersion, forKey: .appVersion)
    }
}

