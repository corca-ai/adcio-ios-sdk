//
// CreditDecreaseRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreditDecreaseRequest: Codable, JSONEncodable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case pending = "PENDING"
        case approved = "APPROVED"
        case rejected = "REJECTED"
    }
    public var id: String
    public var storeId: String
    public var sellerId: String
    public var amount: Double
    public var requestedAt: Date
    public var reason: String
    public var rejectionReason: String?
    public var status: Status
    public var processedAt: Date?
    public var creditHistoryId: String?

    public init(id: String, storeId: String, sellerId: String, amount: Double, requestedAt: Date, reason: String, rejectionReason: String?, status: Status, processedAt: Date?, creditHistoryId: String?) {
        self.id = id
        self.storeId = storeId
        self.sellerId = sellerId
        self.amount = amount
        self.requestedAt = requestedAt
        self.reason = reason
        self.rejectionReason = rejectionReason
        self.status = status
        self.processedAt = processedAt
        self.creditHistoryId = creditHistoryId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case storeId
        case sellerId
        case amount
        case requestedAt
        case reason
        case rejectionReason
        case status
        case processedAt
        case creditHistoryId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(storeId, forKey: .storeId)
        try container.encode(sellerId, forKey: .sellerId)
        try container.encode(amount, forKey: .amount)
        try container.encode(requestedAt, forKey: .requestedAt)
        try container.encode(reason, forKey: .reason)
        try container.encode(rejectionReason, forKey: .rejectionReason)
        try container.encode(status, forKey: .status)
        try container.encode(processedAt, forKey: .processedAt)
        try container.encode(creditHistoryId, forKey: .creditHistoryId)
    }
}

