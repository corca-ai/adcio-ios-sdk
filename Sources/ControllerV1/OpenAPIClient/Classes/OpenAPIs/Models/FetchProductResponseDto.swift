//
// FetchProductResponseDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct FetchProductResponseDto: Codable, JSONEncodable, Hashable {

    public var id: String
    public var idOnStore: String
    public var storeId: String
    public var sellerId: String
    public var name: String
    public var price: Double
    public var discountPrice: Double?
    public var additionalInformation: [AnyCodable]?
    public var summary: String
    public var image: String
    public var includeInRecommendation: Bool
    public var url: String?
    public var deepLink: String?
    public var caption: String?
    public var additionalImages: [String]?
    public var decorationImages: [String]?
    public var createdAt: Date
    public var updatedAt: Date
    public var deletedAt: Date?
    public var store: Client
    public var seller: Client

    public init(id: String, idOnStore: String, storeId: String, sellerId: String, name: String, price: Double, discountPrice: Double?, additionalInformation: [AnyCodable]?, summary: String, image: String, includeInRecommendation: Bool, url: String?, deepLink: String?, caption: String?, additionalImages: [String]?, decorationImages: [String]?, createdAt: Date, updatedAt: Date, deletedAt: Date?, store: Client, seller: Client) {
        self.id = id
        self.idOnStore = idOnStore
        self.storeId = storeId
        self.sellerId = sellerId
        self.name = name
        self.price = price
        self.discountPrice = discountPrice
        self.additionalInformation = additionalInformation
        self.summary = summary
        self.image = image
        self.includeInRecommendation = includeInRecommendation
        self.url = url
        self.deepLink = deepLink
        self.caption = caption
        self.additionalImages = additionalImages
        self.decorationImages = decorationImages
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.deletedAt = deletedAt
        self.store = store
        self.seller = seller
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case idOnStore
        case storeId
        case sellerId
        case name
        case price
        case discountPrice
        case additionalInformation
        case summary
        case image
        case includeInRecommendation
        case url
        case deepLink
        case caption
        case additionalImages
        case decorationImages
        case createdAt
        case updatedAt
        case deletedAt
        case store
        case seller
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(idOnStore, forKey: .idOnStore)
        try container.encode(storeId, forKey: .storeId)
        try container.encode(sellerId, forKey: .sellerId)
        try container.encode(name, forKey: .name)
        try container.encode(price, forKey: .price)
        try container.encode(discountPrice, forKey: .discountPrice)
        try container.encode(additionalInformation, forKey: .additionalInformation)
        try container.encode(summary, forKey: .summary)
        try container.encode(image, forKey: .image)
        try container.encode(includeInRecommendation, forKey: .includeInRecommendation)
        try container.encode(url, forKey: .url)
        try container.encode(deepLink, forKey: .deepLink)
        try container.encode(caption, forKey: .caption)
        try container.encode(additionalImages, forKey: .additionalImages)
        try container.encode(decorationImages, forKey: .decorationImages)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encode(deletedAt, forKey: .deletedAt)
        try container.encode(store, forKey: .store)
        try container.encode(seller, forKey: .seller)
    }
}

