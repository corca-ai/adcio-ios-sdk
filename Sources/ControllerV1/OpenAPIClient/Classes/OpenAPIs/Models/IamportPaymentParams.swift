//
// IamportPaymentParams.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct IamportPaymentParams: Codable, JSONEncodable, Hashable {

    public var pg: String
    public var payMethod: String
    public var merchantUid: String
    public var name: String
    public var amount: Double
    public var buyerEmail: String
    public var buyerName: String
    public var buyerTel: String
    public var buyerAddr: String
    public var buyerPostcode: String

    public init(pg: String, payMethod: String, merchantUid: String, name: String, amount: Double, buyerEmail: String, buyerName: String, buyerTel: String, buyerAddr: String, buyerPostcode: String) {
        self.pg = pg
        self.payMethod = payMethod
        self.merchantUid = merchantUid
        self.name = name
        self.amount = amount
        self.buyerEmail = buyerEmail
        self.buyerName = buyerName
        self.buyerTel = buyerTel
        self.buyerAddr = buyerAddr
        self.buyerPostcode = buyerPostcode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pg
        case payMethod = "pay_method"
        case merchantUid = "merchant_uid"
        case name
        case amount
        case buyerEmail = "buyer_email"
        case buyerName = "buyer_name"
        case buyerTel = "buyer_tel"
        case buyerAddr = "buyer_addr"
        case buyerPostcode = "buyer_postcode"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pg, forKey: .pg)
        try container.encode(payMethod, forKey: .payMethod)
        try container.encode(merchantUid, forKey: .merchantUid)
        try container.encode(name, forKey: .name)
        try container.encode(amount, forKey: .amount)
        try container.encode(buyerEmail, forKey: .buyerEmail)
        try container.encode(buyerName, forKey: .buyerName)
        try container.encode(buyerTel, forKey: .buyerTel)
        try container.encode(buyerAddr, forKey: .buyerAddr)
        try container.encode(buyerPostcode, forKey: .buyerPostcode)
    }
}

