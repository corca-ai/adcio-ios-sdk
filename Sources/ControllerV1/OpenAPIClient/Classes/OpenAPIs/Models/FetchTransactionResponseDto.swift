//
// FetchTransactionResponseDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct FetchTransactionResponseDto: Codable, JSONEncodable, Hashable {

    public enum Currency: String, Codable, CaseIterable {
        case krw = "KRW"
        case usd = "USD"
        case vnd = "VND"
    }
    public enum PaymentMethod: String, Codable, CaseIterable {
        case card = "Card"
        case directBank = "DirectBank"
        case vbank = "VBank"
        case hpp = "HPP"
    }
    public enum Status: String, Codable, CaseIterable {
        case pending = "Pending"
        case ready = "Ready"
        case completed = "Completed"
        case unauthorized = "Unauthorized"
        case failed = "Failed"
        case closed = "Closed"
        case cancelled = "Cancelled"
    }
    public enum Category: String, Codable, CaseIterable {
        case autoCharge = "AUTO_CHARGE"
        case subscription = "SUBSCRIPTION"
    }
    public enum ModelType: String, Codable, CaseIterable {
        case pay = "PAY"
        case refund = "REFUND"
    }
    public enum FailedReason: String, Codable, CaseIterable {
        case closedCard = "CLOSED_CARD"
        case balanceInsufficient = "BALANCE_INSUFFICIENT"
        case etc = "ETC"
    }
    public var id: String
    public var impUid: String?
    public var impVBank: IamportPaymentVBank?
    public var paymentCard: TransactionPaymentCard
    public var clientId: String
    public var amount: Double
    public var currency: Currency
    public var paymentMethod: PaymentMethod
    public var status: Status
    public var createdAt: Date
    public var paidAt: Date?
    public var category: Category
    public var type: ModelType
    public var failedReason: FailedReason?
    public var creditHistory: CreditHistory
    public var client: Client

    public init(id: String, impUid: String?, impVBank: IamportPaymentVBank?, paymentCard: TransactionPaymentCard, clientId: String, amount: Double, currency: Currency, paymentMethod: PaymentMethod, status: Status, createdAt: Date, paidAt: Date?, category: Category, type: ModelType, failedReason: FailedReason?, creditHistory: CreditHistory, client: Client) {
        self.id = id
        self.impUid = impUid
        self.impVBank = impVBank
        self.paymentCard = paymentCard
        self.clientId = clientId
        self.amount = amount
        self.currency = currency
        self.paymentMethod = paymentMethod
        self.status = status
        self.createdAt = createdAt
        self.paidAt = paidAt
        self.category = category
        self.type = type
        self.failedReason = failedReason
        self.creditHistory = creditHistory
        self.client = client
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case impUid
        case impVBank
        case paymentCard
        case clientId
        case amount
        case currency
        case paymentMethod
        case status
        case createdAt
        case paidAt
        case category
        case type
        case failedReason
        case creditHistory
        case client
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(impUid, forKey: .impUid)
        try container.encode(impVBank, forKey: .impVBank)
        try container.encode(paymentCard, forKey: .paymentCard)
        try container.encode(clientId, forKey: .clientId)
        try container.encode(amount, forKey: .amount)
        try container.encode(currency, forKey: .currency)
        try container.encode(paymentMethod, forKey: .paymentMethod)
        try container.encode(status, forKey: .status)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(paidAt, forKey: .paidAt)
        try container.encode(category, forKey: .category)
        try container.encode(type, forKey: .type)
        try container.encode(failedReason, forKey: .failedReason)
        try container.encode(creditHistory, forKey: .creditHistory)
        try container.encode(client, forKey: .client)
    }
}

