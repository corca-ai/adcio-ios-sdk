//
// ImpressionObserver.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ImpressionObserver: Codable, JSONEncodable, Hashable {

    public var useIntersectionObserver: Bool?
    public var className: String?
    public var wrapper: String?

    public init(useIntersectionObserver: Bool? = nil, className: String? = nil, wrapper: String? = nil) {
        self.useIntersectionObserver = useIntersectionObserver
        self.className = className
        self.wrapper = wrapper
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case useIntersectionObserver
        case className
        case wrapper
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(useIntersectionObserver, forKey: .useIntersectionObserver)
        try container.encodeIfPresent(className, forKey: .className)
        try container.encodeIfPresent(wrapper, forKey: .wrapper)
    }
}

