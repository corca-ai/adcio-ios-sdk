//
// DashboardAdset.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DashboardAdset: Codable, JSONEncodable, Hashable {

    public enum AdsetType: String, Codable, CaseIterable {
        case grid = "GRID"
        case banner = "BANNER"
    }
    public var adGroupId: String
    public var adGroupTitle: String
    public var adsetType: AdsetType
    public var adsetId: String
    public var adsetName: String
    public var adsetMediaUrl: String
    public var metric: BaseAdMetric

    public init(adGroupId: String, adGroupTitle: String, adsetType: AdsetType, adsetId: String, adsetName: String, adsetMediaUrl: String, metric: BaseAdMetric) {
        self.adGroupId = adGroupId
        self.adGroupTitle = adGroupTitle
        self.adsetType = adsetType
        self.adsetId = adsetId
        self.adsetName = adsetName
        self.adsetMediaUrl = adsetMediaUrl
        self.metric = metric
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case adGroupId
        case adGroupTitle
        case adsetType
        case adsetId
        case adsetName
        case adsetMediaUrl
        case metric
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(adGroupId, forKey: .adGroupId)
        try container.encode(adGroupTitle, forKey: .adGroupTitle)
        try container.encode(adsetType, forKey: .adsetType)
        try container.encode(adsetId, forKey: .adsetId)
        try container.encode(adsetName, forKey: .adsetName)
        try container.encode(adsetMediaUrl, forKey: .adsetMediaUrl)
        try container.encode(metric, forKey: .metric)
    }
}

