//
// FetchSellerCreditUpdateHistoryResponseDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct FetchSellerCreditUpdateHistoryResponseDto: Codable, JSONEncodable, Hashable {

    public enum AdjustmentType: String, Codable, CaseIterable {
        case increase = "INCREASE"
        case decrease = "DECREASE"
    }
    public var creditType: CreditType
    public var id: String
    public var storeId: String?
    public var sellerId: String?
    public var adjustmentType: AdjustmentType
    public var amount: Double
    public var createdAt: Date
    public var transactionId: String?
    public var creditDecreaseRequestId: String?
    public var comment: String?

    public init(creditType: CreditType, id: String, storeId: String?, sellerId: String?, adjustmentType: AdjustmentType, amount: Double, createdAt: Date, transactionId: String?, creditDecreaseRequestId: String?, comment: String?) {
        self.creditType = creditType
        self.id = id
        self.storeId = storeId
        self.sellerId = sellerId
        self.adjustmentType = adjustmentType
        self.amount = amount
        self.createdAt = createdAt
        self.transactionId = transactionId
        self.creditDecreaseRequestId = creditDecreaseRequestId
        self.comment = comment
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case creditType
        case id
        case storeId
        case sellerId
        case adjustmentType
        case amount
        case createdAt
        case transactionId
        case creditDecreaseRequestId
        case comment
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(creditType, forKey: .creditType)
        try container.encode(id, forKey: .id)
        try container.encode(storeId, forKey: .storeId)
        try container.encode(sellerId, forKey: .sellerId)
        try container.encode(adjustmentType, forKey: .adjustmentType)
        try container.encode(amount, forKey: .amount)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(transactionId, forKey: .transactionId)
        try container.encode(creditDecreaseRequestId, forKey: .creditDecreaseRequestId)
        try container.encode(comment, forKey: .comment)
    }
}

