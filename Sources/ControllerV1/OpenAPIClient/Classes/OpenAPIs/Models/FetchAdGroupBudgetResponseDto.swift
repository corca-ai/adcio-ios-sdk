//
// FetchAdGroupBudgetResponseDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct FetchAdGroupBudgetResponseDto: Codable, JSONEncodable, Hashable {

    public enum Timezone: String, Codable, CaseIterable {
        case kst = "KST"
        case ict = "ICT"
        case est = "EST"
        case cst = "CST"
        case mst = "MST"
        case pst = "PST"
        case akst = "AKST"
        case hst = "HST"
    }
    public enum Currency: String, Codable, CaseIterable {
        case krw = "KRW"
        case usd = "USD"
        case vnd = "VND"
    }
    public var id: String
    public var sellerId: String
    public var maxBudgetPerDay: Double
    public var dailyUsedBudget: Double
    public var timezone: Timezone
    public var currency: Currency

    public init(id: String, sellerId: String, maxBudgetPerDay: Double, dailyUsedBudget: Double, timezone: Timezone, currency: Currency) {
        self.id = id
        self.sellerId = sellerId
        self.maxBudgetPerDay = maxBudgetPerDay
        self.dailyUsedBudget = dailyUsedBudget
        self.timezone = timezone
        self.currency = currency
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case sellerId
        case maxBudgetPerDay
        case dailyUsedBudget
        case timezone
        case currency
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(sellerId, forKey: .sellerId)
        try container.encode(maxBudgetPerDay, forKey: .maxBudgetPerDay)
        try container.encode(dailyUsedBudget, forKey: .dailyUsedBudget)
        try container.encode(timezone, forKey: .timezone)
        try container.encode(currency, forKey: .currency)
    }
}

