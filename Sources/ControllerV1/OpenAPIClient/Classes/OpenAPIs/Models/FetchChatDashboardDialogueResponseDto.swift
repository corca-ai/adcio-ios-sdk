//
// FetchChatDashboardDialogueResponseDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct FetchChatDashboardDialogueResponseDto: Codable, JSONEncodable, Hashable {

    public enum Role: String, Codable, CaseIterable {
        case user = "user"
        case assistant = "assistant"
    }
    public enum ModelType: String, Codable, CaseIterable {
        case chat = "CHAT"
        case recommend = "RECOMMEND"
        case searchItemInfo = "SEARCH_ITEM_INFO"
        case explainHistory = "EXPLAIN_HISTORY"
        case error = "ERROR"
    }
    public var id: Double
    public var role: Role
    public var content: String
    public var createdAt: Date
    public var groupId: String
    public var customerId: String
    public var type: ModelType?

    public init(id: Double, role: Role, content: String, createdAt: Date, groupId: String, customerId: String, type: ModelType? = nil) {
        self.id = id
        self.role = role
        self.content = content
        self.createdAt = createdAt
        self.groupId = groupId
        self.customerId = customerId
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case role
        case content
        case createdAt
        case groupId
        case customerId
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(role, forKey: .role)
        try container.encode(content, forKey: .content)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(groupId, forKey: .groupId)
        try container.encode(customerId, forKey: .customerId)
        try container.encodeIfPresent(type, forKey: .type)
    }
}

