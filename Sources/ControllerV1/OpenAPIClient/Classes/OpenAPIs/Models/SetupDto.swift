//
// SetupDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SetupDto: Codable, JSONEncodable, Hashable {

    public enum Currency: String, Codable, CaseIterable {
        case krw = "KRW"
        case usd = "USD"
        case vnd = "VND"
    }
    public enum Timezone: String, Codable, CaseIterable {
        case kst = "KST"
        case ict = "ICT"
        case est = "EST"
        case cst = "CST"
        case mst = "MST"
        case pst = "PST"
        case akst = "AKST"
        case hst = "HST"
    }
    public enum StoreType: String, Codable, CaseIterable {
        case platform = "PLATFORM"
        case inHouse = "IN_HOUSE"
    }
    public enum StoreSolutionType: String, Codable, CaseIterable {
        case selfDeveloped = "SELF_DEVELOPED"
        case cafe24 = "CAFE24"
    }
    static let clientNameRule = StringRule(minLength: nil, maxLength: nil, pattern: "/clientNameRegex/")
    public var clientName: String
    public var currency: Currency
    public var timezone: Timezone
    public var state: String?
    public var storeType: StoreType
    public var storeSolutionType: StoreSolutionType?
    public var params: AnyCodable?
    public var businessLicenseFileUrl: String

    public init(clientName: String, currency: Currency, timezone: Timezone, state: String? = nil, storeType: StoreType, storeSolutionType: StoreSolutionType? = nil, params: AnyCodable? = nil, businessLicenseFileUrl: String) {
        self.clientName = clientName
        self.currency = currency
        self.timezone = timezone
        self.state = state
        self.storeType = storeType
        self.storeSolutionType = storeSolutionType
        self.params = params
        self.businessLicenseFileUrl = businessLicenseFileUrl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientName
        case currency
        case timezone
        case state
        case storeType
        case storeSolutionType
        case params
        case businessLicenseFileUrl
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(clientName, forKey: .clientName)
        try container.encode(currency, forKey: .currency)
        try container.encode(timezone, forKey: .timezone)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encode(storeType, forKey: .storeType)
        try container.encodeIfPresent(storeSolutionType, forKey: .storeSolutionType)
        try container.encodeIfPresent(params, forKey: .params)
        try container.encode(businessLicenseFileUrl, forKey: .businessLicenseFileUrl)
    }
}

