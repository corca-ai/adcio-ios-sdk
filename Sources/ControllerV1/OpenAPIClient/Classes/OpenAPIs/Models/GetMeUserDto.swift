//
// GetMeUserDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GetMeUserDto: Codable, Hashable {

    public enum Role: Double, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
    }

    public var clientId: String?
    public var email: String
    public var emailVerified: Bool
    public var emailReceiptAgreed: Bool
    public var password: String
    public var createdAt: Date
    public var deletedAt: Date?
    public var role: Role
    public var client: ClientWithBusinessLicenseDto

    public init(clientId: String?, email: String, emailVerified: Bool, emailReceiptAgreed: Bool, password: String, createdAt: Date, deletedAt: Date?, role: Role, client: ClientWithBusinessLicenseDto) {
        self.clientId = clientId
        self.email = email
        self.emailVerified = emailVerified
        self.emailReceiptAgreed = emailReceiptAgreed
        self.password = password
        self.createdAt = createdAt
        self.deletedAt = deletedAt
        self.role = role
        self.client = client
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId
        case email
        case emailVerified
        case emailReceiptAgreed
        case password
        case createdAt
        case deletedAt
        case role
        case client
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(clientId, forKey: .clientId)
        try container.encode(email, forKey: .email)
        try container.encode(emailVerified, forKey: .emailVerified)
        try container.encode(emailReceiptAgreed, forKey: .emailReceiptAgreed)
        try container.encode(password, forKey: .password)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(deletedAt, forKey: .deletedAt)
        try container.encode(role, forKey: .role)
        try container.encode(client, forKey: .client)
    }
}
