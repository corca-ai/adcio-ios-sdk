//
// UpsertPaymentCardDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UpsertPaymentCardDto: Codable, JSONEncodable, Hashable {

    static let cardNumberRule = StringRule(minLength: nil, maxLength: nil, pattern: "/cardNumberRegex/")
    static let expiryRule = StringRule(minLength: nil, maxLength: nil, pattern: "/cardExpiryRegex/")
    static let birthdayRule = StringRule(minLength: nil, maxLength: nil, pattern: "/cardBirthdayRegex/")
    static let pwd2DigitRule = StringRule(minLength: nil, maxLength: nil, pattern: "/cardPwd2DigitRegex/")
    /** 카드번호 */
    public var cardNumber: String
    /** 카드 유효일자 */
    public var expiry: String
    /** 생년월일 6자리 */
    public var birthday: String
    /** 카드번호 앞 2자리 */
    public var pwd2Digit: String

    public init(cardNumber: String, expiry: String, birthday: String, pwd2Digit: String) {
        self.cardNumber = cardNumber
        self.expiry = expiry
        self.birthday = birthday
        self.pwd2Digit = pwd2Digit
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case cardNumber
        case expiry
        case birthday
        case pwd2Digit
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(cardNumber, forKey: .cardNumber)
        try container.encode(expiry, forKey: .expiry)
        try container.encode(birthday, forKey: .birthday)
        try container.encode(pwd2Digit, forKey: .pwd2Digit)
    }
}

