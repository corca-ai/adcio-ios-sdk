//
// CreateWidgetPlacementDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateWidgetPlacementDto: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case grid = "GRID"
        case banner = "BANNER"
    }
    public enum SuggestionType: String, Codable, CaseIterable {
        case recommend = "RECOMMEND"
        case advertise = "ADVERTISE"
    }
    public enum BannerPlacementType: String, Codable, CaseIterable {
        case _static = "STATIC"
        case slide = "SLIDE"
    }
    public enum SupportEnvironment: String, Codable, CaseIterable {
        case web = "WEB"
        case webMobile = "WEB_MOBILE"
        case app = "APP"
    }
    static let titleRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    static let pageNameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var title: String
    public var pageName: String
    public var type: ModelType
    public var suggestionType: SuggestionType
    public var bannerPlacementType: BannerPlacementType?
    public var supportEnvironment: SupportEnvironment
    public var widgetId: String
    public var values: AnyCodable

    public init(title: String, pageName: String, type: ModelType, suggestionType: SuggestionType, bannerPlacementType: BannerPlacementType? = nil, supportEnvironment: SupportEnvironment, widgetId: String, values: AnyCodable) {
        self.title = title
        self.pageName = pageName
        self.type = type
        self.suggestionType = suggestionType
        self.bannerPlacementType = bannerPlacementType
        self.supportEnvironment = supportEnvironment
        self.widgetId = widgetId
        self.values = values
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case title
        case pageName
        case type
        case suggestionType
        case bannerPlacementType
        case supportEnvironment
        case widgetId
        case values
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(title, forKey: .title)
        try container.encode(pageName, forKey: .pageName)
        try container.encode(type, forKey: .type)
        try container.encode(suggestionType, forKey: .suggestionType)
        try container.encodeIfPresent(bannerPlacementType, forKey: .bannerPlacementType)
        try container.encode(supportEnvironment, forKey: .supportEnvironment)
        try container.encode(widgetId, forKey: .widgetId)
        try container.encode(values, forKey: .values)
    }
}

