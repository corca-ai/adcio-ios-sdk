//
// CreateAdGroupDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateAdGroupDto: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case grid = "GRID"
    }
    /** 기한이 있는 광고 그룹의 경우 일 예산을 저장하고, 기한이 없는 광고 그룹의 경우 하루 최대 예산을 저장 */
    public var maxBudgetPerDay: Double?
    /** 기한이 있는 광고 그룹에 대해 총 예산을 저장 */
    public var totalBudgetInPeriod: Double?
    public var budgetType: AdGroupBudgetType
    public var title: String
    public var type: ModelType
    public var placementId: String
    public var productIds: [String]?
    public var bannerIds: [String]?
    public var startsAt: Date
    public var endsAt: Date?
    public var targetValueIds: [String]
    public var campaignId: String

    public init(maxBudgetPerDay: Double? = nil, totalBudgetInPeriod: Double? = nil, budgetType: AdGroupBudgetType, title: String, type: ModelType, placementId: String, productIds: [String]? = nil, bannerIds: [String]? = nil, startsAt: Date, endsAt: Date? = nil, targetValueIds: [String], campaignId: String) {
        self.maxBudgetPerDay = maxBudgetPerDay
        self.totalBudgetInPeriod = totalBudgetInPeriod
        self.budgetType = budgetType
        self.title = title
        self.type = type
        self.placementId = placementId
        self.productIds = productIds
        self.bannerIds = bannerIds
        self.startsAt = startsAt
        self.endsAt = endsAt
        self.targetValueIds = targetValueIds
        self.campaignId = campaignId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case maxBudgetPerDay
        case totalBudgetInPeriod
        case budgetType
        case title
        case type
        case placementId
        case productIds
        case bannerIds
        case startsAt
        case endsAt
        case targetValueIds
        case campaignId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(maxBudgetPerDay, forKey: .maxBudgetPerDay)
        try container.encodeIfPresent(totalBudgetInPeriod, forKey: .totalBudgetInPeriod)
        try container.encode(budgetType, forKey: .budgetType)
        try container.encode(title, forKey: .title)
        try container.encode(type, forKey: .type)
        try container.encode(placementId, forKey: .placementId)
        try container.encodeIfPresent(productIds, forKey: .productIds)
        try container.encodeIfPresent(bannerIds, forKey: .bannerIds)
        try container.encode(startsAt, forKey: .startsAt)
        try container.encodeIfPresent(endsAt, forKey: .endsAt)
        try container.encode(targetValueIds, forKey: .targetValueIds)
        try container.encode(campaignId, forKey: .campaignId)
    }
}

