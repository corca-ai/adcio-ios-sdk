//
// ProductColumnMappingDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ProductColumnMappingDto: Codable, JSONEncodable, Hashable {

    public var idOnStore: String
    public var name: String
    public var price: String
    public var description: String?
    public var includeInRecommendation: String?
    public var image: String
    public var sellerIdOnStore: String
    public var url: String?
    public var deepLink: String?

    public init(idOnStore: String, name: String, price: String, description: String? = nil, includeInRecommendation: String? = nil, image: String, sellerIdOnStore: String, url: String? = nil, deepLink: String? = nil) {
        self.idOnStore = idOnStore
        self.name = name
        self.price = price
        self.description = description
        self.includeInRecommendation = includeInRecommendation
        self.image = image
        self.sellerIdOnStore = sellerIdOnStore
        self.url = url
        self.deepLink = deepLink
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case idOnStore
        case name
        case price
        case description
        case includeInRecommendation
        case image
        case sellerIdOnStore
        case url
        case deepLink
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(idOnStore, forKey: .idOnStore)
        try container.encode(name, forKey: .name)
        try container.encode(price, forKey: .price)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(includeInRecommendation, forKey: .includeInRecommendation)
        try container.encode(image, forKey: .image)
        try container.encode(sellerIdOnStore, forKey: .sellerIdOnStore)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(deepLink, forKey: .deepLink)
    }
}

