//
// ProductSuggestionRequestDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ProductSuggestionRequestDto: Codable, JSONEncodable, Hashable {

    /** The session starts when the customer visits the store. It persists until the customer closes the tab, browser or app. */
    public var sessionId: String
    /** The device identifier should be unique for each device. A customer can have multiple devices. */
    public var deviceId: String
    /** The customer identifier which is generated and managed by the store. The store should configure `frontApi` parameter of ADCIO SDK so that the `customerId` can be sent to ADCIO API. */
    public var customerId: String?
    /** The version of the SDK */
    public var sdkVersion: String?
    /** Identifier for the placement which the suggestion will be placed. */
    public var placementId: String
    /** The X coordinate of the placement in pixel. */
    public var placementPositionX: Double?
    /** The Y coordinate of the placement in pixel. */
    public var placementPositionY: Double?
    /** Whether the request is from the ADCIO agent or not. Default value is `false`. */
    public var fromAgent: Bool?
    /** Identifier for the request client. */
    public var clientId: String
    /** Product IDs(on store) that should NOT be included in the suggestion. */
    public var excludingProductIds: [String]?
    /** Product IDs(on store) that support the fixed baseline suggestion. */
    public var baselineProductIds: [String]?
    /** The category id(on store) for filtering adsets. */
    public var categoryId: String?
    /** Product filters for filtering adsets. */
    public var filters: [[String: ProductFilterOperationDto]]?
    public var targets: [SuggestionRequestTarget]?
    public var userAgent: String?

    public init(sessionId: String, deviceId: String, customerId: String? = nil, sdkVersion: String? = nil, placementId: String, placementPositionX: Double? = nil, placementPositionY: Double? = nil, fromAgent: Bool? = nil, clientId: String, excludingProductIds: [String]? = nil, baselineProductIds: [String]? = nil, categoryId: String? = nil, filters: [[String: ProductFilterOperationDto]]? = nil, targets: [SuggestionRequestTarget]? = nil, userAgent: String? = nil) {
        self.sessionId = sessionId
        self.deviceId = deviceId
        self.customerId = customerId
        self.sdkVersion = sdkVersion
        self.placementId = placementId
        self.placementPositionX = placementPositionX
        self.placementPositionY = placementPositionY
        self.fromAgent = fromAgent
        self.clientId = clientId
        self.excludingProductIds = excludingProductIds
        self.baselineProductIds = baselineProductIds
        self.categoryId = categoryId
        self.filters = filters
        self.targets = targets
        self.userAgent = userAgent
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sessionId
        case deviceId
        case customerId
        case sdkVersion
        case placementId
        case placementPositionX
        case placementPositionY
        case fromAgent
        case clientId
        case excludingProductIds
        case baselineProductIds
        case categoryId
        case filters
        case targets
        case userAgent
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(sessionId, forKey: .sessionId)
        try container.encode(deviceId, forKey: .deviceId)
        try container.encodeIfPresent(customerId, forKey: .customerId)
        try container.encodeIfPresent(sdkVersion, forKey: .sdkVersion)
        try container.encode(placementId, forKey: .placementId)
        try container.encodeIfPresent(placementPositionX, forKey: .placementPositionX)
        try container.encodeIfPresent(placementPositionY, forKey: .placementPositionY)
        try container.encodeIfPresent(fromAgent, forKey: .fromAgent)
        try container.encode(clientId, forKey: .clientId)
        try container.encodeIfPresent(excludingProductIds, forKey: .excludingProductIds)
        try container.encodeIfPresent(baselineProductIds, forKey: .baselineProductIds)
        try container.encodeIfPresent(categoryId, forKey: .categoryId)
        try container.encodeIfPresent(filters, forKey: .filters)
        try container.encodeIfPresent(targets, forKey: .targets)
        try container.encodeIfPresent(userAgent, forKey: .userAgent)
    }
}

