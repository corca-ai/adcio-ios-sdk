//
// AdGroup.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AdGroup: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case grid = "GRID"
    }
    public enum BudgetType: String, Codable, CaseIterable {
        case dailyBudget = "DAILY_BUDGET"
        case totalBudgetInPeriod = "TOTAL_BUDGET_IN_PERIOD"
        case maxBudgetPerDay = "MAX_BUDGET_PER_DAY"
    }
    public enum LatestReviewStatus: String, Codable, CaseIterable {
        case pending = "PENDING"
        case approved = "APPROVED"
        case rejected = "REJECTED"
    }
    public var id: String
    public var title: String
    public var type: ModelType
    public var placementId: String
    public var maxBudgetPerDay: Double
    public var totalBudgetInPeriod: Double?
    public var budgetType: BudgetType
    public var dailyUsedBudget: Double
    public var activated: Bool
    public var startsAt: Date
    public var endsAt: Date?
    public var storeId: String?
    public var sellerId: String
    public var campaignId: String
    public var latestReviewStatus: LatestReviewStatus
    public var latestReviewId: String?
    public var createdAt: Date
    public var updatedAt: Date
    public var deletedAt: Date?

    public init(id: String, title: String, type: ModelType, placementId: String, maxBudgetPerDay: Double, totalBudgetInPeriod: Double?, budgetType: BudgetType, dailyUsedBudget: Double, activated: Bool, startsAt: Date, endsAt: Date?, storeId: String?, sellerId: String, campaignId: String, latestReviewStatus: LatestReviewStatus, latestReviewId: String?, createdAt: Date, updatedAt: Date, deletedAt: Date?) {
        self.id = id
        self.title = title
        self.type = type
        self.placementId = placementId
        self.maxBudgetPerDay = maxBudgetPerDay
        self.totalBudgetInPeriod = totalBudgetInPeriod
        self.budgetType = budgetType
        self.dailyUsedBudget = dailyUsedBudget
        self.activated = activated
        self.startsAt = startsAt
        self.endsAt = endsAt
        self.storeId = storeId
        self.sellerId = sellerId
        self.campaignId = campaignId
        self.latestReviewStatus = latestReviewStatus
        self.latestReviewId = latestReviewId
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.deletedAt = deletedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case title
        case type
        case placementId
        case maxBudgetPerDay
        case totalBudgetInPeriod
        case budgetType
        case dailyUsedBudget
        case activated
        case startsAt
        case endsAt
        case storeId
        case sellerId
        case campaignId
        case latestReviewStatus
        case latestReviewId
        case createdAt
        case updatedAt
        case deletedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(title, forKey: .title)
        try container.encode(type, forKey: .type)
        try container.encode(placementId, forKey: .placementId)
        try container.encode(maxBudgetPerDay, forKey: .maxBudgetPerDay)
        try container.encode(totalBudgetInPeriod, forKey: .totalBudgetInPeriod)
        try container.encode(budgetType, forKey: .budgetType)
        try container.encode(dailyUsedBudget, forKey: .dailyUsedBudget)
        try container.encode(activated, forKey: .activated)
        try container.encode(startsAt, forKey: .startsAt)
        try container.encode(endsAt, forKey: .endsAt)
        try container.encode(storeId, forKey: .storeId)
        try container.encode(sellerId, forKey: .sellerId)
        try container.encode(campaignId, forKey: .campaignId)
        try container.encode(latestReviewStatus, forKey: .latestReviewStatus)
        try container.encode(latestReviewId, forKey: .latestReviewId)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encode(deletedAt, forKey: .deletedAt)
    }
}

