//
// CreateTransactionDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateTransactionDto: Codable, JSONEncodable, Hashable {

    public enum PaymentMethod: String, Codable, CaseIterable {
        case card = "Card"
        case directBank = "DirectBank"
        case vbank = "VBank"
        case hpp = "HPP"
    }
    public enum Currency: String, Codable, CaseIterable {
        case krw = "KRW"
        case usd = "USD"
        case vnd = "VND"
    }
    public enum Pg: String, Codable, CaseIterable {
        case inicis = "INICIS"
        case toss = "TOSS"
    }
    public enum PaymentCategory: String, Codable, CaseIterable {
        case autoCharge = "AUTO_CHARGE"
        case subscription = "SUBSCRIPTION"
    }
    public var amount: Double
    public var paymentMethod: PaymentMethod
    public var currency: Currency
    public var pg: Pg
    public var paymentCategory: PaymentCategory

    public init(amount: Double, paymentMethod: PaymentMethod, currency: Currency, pg: Pg, paymentCategory: PaymentCategory) {
        self.amount = amount
        self.paymentMethod = paymentMethod
        self.currency = currency
        self.pg = pg
        self.paymentCategory = paymentCategory
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case amount
        case paymentMethod
        case currency
        case pg
        case paymentCategory
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(amount, forKey: .amount)
        try container.encode(paymentMethod, forKey: .paymentMethod)
        try container.encode(currency, forKey: .currency)
        try container.encode(pg, forKey: .pg)
        try container.encode(paymentCategory, forKey: .paymentCategory)
    }
}

