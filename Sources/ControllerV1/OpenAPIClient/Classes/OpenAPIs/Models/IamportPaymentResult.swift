//
// IamportPaymentResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct IamportPaymentResult: Codable, JSONEncodable, Hashable {

    public var applyNum: String
    public var bankName: String?
    public var buyerAddr: String
    public var buyerEmail: String
    public var buyerName: String
    public var buyerPostcode: String
    public var buyerTel: String
    public var cardName: String
    public var cardNumber: String
    public var cardQuota: Double
    public var currency: String
    public var customData: String?
    public var impUid: String
    public var merchantUid: String
    public var name: String
    public var paidAmount: Double
    public var paidAt: Double
    public var payMethod: String
    public var pgProvider: String
    public var pgTid: String
    public var pgType: String
    public var receiptUrl: String
    public var status: String
    public var success: Bool

    public init(applyNum: String, bankName: String?, buyerAddr: String, buyerEmail: String, buyerName: String, buyerPostcode: String, buyerTel: String, cardName: String, cardNumber: String, cardQuota: Double, currency: String, customData: String?, impUid: String, merchantUid: String, name: String, paidAmount: Double, paidAt: Double, payMethod: String, pgProvider: String, pgTid: String, pgType: String, receiptUrl: String, status: String, success: Bool) {
        self.applyNum = applyNum
        self.bankName = bankName
        self.buyerAddr = buyerAddr
        self.buyerEmail = buyerEmail
        self.buyerName = buyerName
        self.buyerPostcode = buyerPostcode
        self.buyerTel = buyerTel
        self.cardName = cardName
        self.cardNumber = cardNumber
        self.cardQuota = cardQuota
        self.currency = currency
        self.customData = customData
        self.impUid = impUid
        self.merchantUid = merchantUid
        self.name = name
        self.paidAmount = paidAmount
        self.paidAt = paidAt
        self.payMethod = payMethod
        self.pgProvider = pgProvider
        self.pgTid = pgTid
        self.pgType = pgType
        self.receiptUrl = receiptUrl
        self.status = status
        self.success = success
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case applyNum = "apply_num"
        case bankName = "bank_name"
        case buyerAddr = "buyer_addr"
        case buyerEmail = "buyer_email"
        case buyerName = "buyer_name"
        case buyerPostcode = "buyer_postcode"
        case buyerTel = "buyer_tel"
        case cardName = "card_name"
        case cardNumber = "card_number"
        case cardQuota = "card_quota"
        case currency
        case customData = "custom_data"
        case impUid = "imp_uid"
        case merchantUid = "merchant_uid"
        case name
        case paidAmount = "paid_amount"
        case paidAt = "paid_at"
        case payMethod = "pay_method"
        case pgProvider = "pg_provider"
        case pgTid = "pg_tid"
        case pgType = "pg_type"
        case receiptUrl = "receipt_url"
        case status
        case success
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(applyNum, forKey: .applyNum)
        try container.encode(bankName, forKey: .bankName)
        try container.encode(buyerAddr, forKey: .buyerAddr)
        try container.encode(buyerEmail, forKey: .buyerEmail)
        try container.encode(buyerName, forKey: .buyerName)
        try container.encode(buyerPostcode, forKey: .buyerPostcode)
        try container.encode(buyerTel, forKey: .buyerTel)
        try container.encode(cardName, forKey: .cardName)
        try container.encode(cardNumber, forKey: .cardNumber)
        try container.encode(cardQuota, forKey: .cardQuota)
        try container.encode(currency, forKey: .currency)
        try container.encode(customData, forKey: .customData)
        try container.encode(impUid, forKey: .impUid)
        try container.encode(merchantUid, forKey: .merchantUid)
        try container.encode(name, forKey: .name)
        try container.encode(paidAmount, forKey: .paidAmount)
        try container.encode(paidAt, forKey: .paidAt)
        try container.encode(payMethod, forKey: .payMethod)
        try container.encode(pgProvider, forKey: .pgProvider)
        try container.encode(pgTid, forKey: .pgTid)
        try container.encode(pgType, forKey: .pgType)
        try container.encode(receiptUrl, forKey: .receiptUrl)
        try container.encode(status, forKey: .status)
        try container.encode(success, forKey: .success)
    }
}

