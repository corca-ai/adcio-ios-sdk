//
// FetchByLicenseNumberResponseDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct FetchByLicenseNumberResponseDto: Codable, JSONEncodable, Hashable {

    public enum InspectionStatus: String, Codable, CaseIterable {
        case pending = "PENDING"
        case approved = "APPROVED"
        case rejected = "REJECTED"
    }
    public var client: Client
    public var id: String
    public var companyName: String?
    public var licenseNumber: String?
    public var inspectionStatus: InspectionStatus
    public var createdAt: Date
    public var updatedAt: Date
    public var deletedAt: Date?

    public init(client: Client, id: String, companyName: String?, licenseNumber: String?, inspectionStatus: InspectionStatus, createdAt: Date, updatedAt: Date, deletedAt: Date?) {
        self.client = client
        self.id = id
        self.companyName = companyName
        self.licenseNumber = licenseNumber
        self.inspectionStatus = inspectionStatus
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.deletedAt = deletedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case client
        case id
        case companyName
        case licenseNumber
        case inspectionStatus
        case createdAt
        case updatedAt
        case deletedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(client, forKey: .client)
        try container.encode(id, forKey: .id)
        try container.encode(companyName, forKey: .companyName)
        try container.encode(licenseNumber, forKey: .licenseNumber)
        try container.encode(inspectionStatus, forKey: .inspectionStatus)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encode(deletedAt, forKey: .deletedAt)
    }
}

