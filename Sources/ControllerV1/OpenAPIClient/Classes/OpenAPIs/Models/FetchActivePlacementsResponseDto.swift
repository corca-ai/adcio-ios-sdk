//
// FetchActivePlacementsResponseDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct FetchActivePlacementsResponseDto: Codable, JSONEncodable, Hashable {

    public enum SuggestionType: String, Codable, CaseIterable {
        case recommend = "RECOMMEND"
        case advertise = "ADVERTISE"
    }
    public enum DevelopEnvironment: String, Codable, CaseIterable {
        case widget = "WIDGET"
        case selfDeveloped = "SELF_DEVELOPED"
        case codeInjector = "CODE_INJECTOR"
    }
    public enum SupportEnvironment: String, Codable, CaseIterable {
        case web = "WEB"
        case webMobile = "WEB_MOBILE"
        case app = "APP"
    }
    public var id: String
    public var type: String
    public var suggestionType: SuggestionType
    public var developEnvironment: DevelopEnvironment
    public var supportEnvironment: SupportEnvironment

    public init(id: String, type: String, suggestionType: SuggestionType, developEnvironment: DevelopEnvironment, supportEnvironment: SupportEnvironment) {
        self.id = id
        self.type = type
        self.suggestionType = suggestionType
        self.developEnvironment = developEnvironment
        self.supportEnvironment = supportEnvironment
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case type
        case suggestionType
        case developEnvironment
        case supportEnvironment
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(type, forKey: .type)
        try container.encode(suggestionType, forKey: .suggestionType)
        try container.encode(developEnvironment, forKey: .developEnvironment)
        try container.encode(supportEnvironment, forKey: .supportEnvironment)
    }
}

