//
// Token.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Token: Codable, JSONEncodable, Hashable {

    public enum WebBuilder: String, Codable, CaseIterable {
        case cafe24 = "cafe24"
        case godo = "godo"
    }
    public var webBuilder: WebBuilder
    public var mallId: String
    public var clientId: String?
    public var accessToken: String
    public var accessTokenExpiresAt: Date
    public var refreshToken: String
    public var refreshTokenExpiresAt: Date
    public var createdAt: Date
    public var updatedAt: Date

    public init(webBuilder: WebBuilder, mallId: String, clientId: String?, accessToken: String, accessTokenExpiresAt: Date, refreshToken: String, refreshTokenExpiresAt: Date, createdAt: Date, updatedAt: Date) {
        self.webBuilder = webBuilder
        self.mallId = mallId
        self.clientId = clientId
        self.accessToken = accessToken
        self.accessTokenExpiresAt = accessTokenExpiresAt
        self.refreshToken = refreshToken
        self.refreshTokenExpiresAt = refreshTokenExpiresAt
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case webBuilder
        case mallId
        case clientId
        case accessToken
        case accessTokenExpiresAt
        case refreshToken
        case refreshTokenExpiresAt
        case createdAt
        case updatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(webBuilder, forKey: .webBuilder)
        try container.encode(mallId, forKey: .mallId)
        try container.encode(clientId, forKey: .clientId)
        try container.encode(accessToken, forKey: .accessToken)
        try container.encode(accessTokenExpiresAt, forKey: .accessTokenExpiresAt)
        try container.encode(refreshToken, forKey: .refreshToken)
        try container.encode(refreshTokenExpiresAt, forKey: .refreshTokenExpiresAt)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}

