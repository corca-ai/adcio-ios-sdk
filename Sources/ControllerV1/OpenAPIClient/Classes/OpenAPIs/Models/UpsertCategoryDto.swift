//
// UpsertCategoryDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UpsertCategoryDto: Codable, JSONEncodable, Hashable {

    public var idOnStore: String?
    public var name: String?
    public var depth0Id: String?
    public var depth1Id: String?
    public var depth2Id: String?
    public var depth3Id: String?
    public var depth4Id: String?

    public init(idOnStore: String? = nil, name: String? = nil, depth0Id: String? = nil, depth1Id: String? = nil, depth2Id: String? = nil, depth3Id: String? = nil, depth4Id: String? = nil) {
        self.idOnStore = idOnStore
        self.name = name
        self.depth0Id = depth0Id
        self.depth1Id = depth1Id
        self.depth2Id = depth2Id
        self.depth3Id = depth3Id
        self.depth4Id = depth4Id
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case idOnStore
        case name
        case depth0Id
        case depth1Id
        case depth2Id
        case depth3Id
        case depth4Id
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(idOnStore, forKey: .idOnStore)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(depth0Id, forKey: .depth0Id)
        try container.encodeIfPresent(depth1Id, forKey: .depth1Id)
        try container.encodeIfPresent(depth2Id, forKey: .depth2Id)
        try container.encodeIfPresent(depth3Id, forKey: .depth3Id)
        try container.encodeIfPresent(depth4Id, forKey: .depth4Id)
    }
}

