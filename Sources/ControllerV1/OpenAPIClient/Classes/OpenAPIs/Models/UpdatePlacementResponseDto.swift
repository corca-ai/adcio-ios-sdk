//
// UpdatePlacementResponseDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UpdatePlacementResponseDto: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case grid = "GRID"
        case banner = "BANNER"
    }
    public enum SuggestionType: String, Codable, CaseIterable {
        case recommend = "RECOMMEND"
        case advertise = "ADVERTISE"
    }
    public enum BannerPlacementType: String, Codable, CaseIterable {
        case _static = "STATIC"
        case slide = "SLIDE"
    }
    public enum SupportEnvironment: String, Codable, CaseIterable {
        case web = "WEB"
        case webMobile = "WEB_MOBILE"
        case app = "APP"
    }
    public enum DevelopEnvironment: String, Codable, CaseIterable {
        case widget = "WIDGET"
        case selfDeveloped = "SELF_DEVELOPED"
        case codeInjector = "CODE_INJECTOR"
    }
    public enum Property: String, Codable, CaseIterable {
        case new = "NEW"
        case hot = "HOT"
        case personal = "PERSONAL"
        case sameGoods = "SAME_GOODS"
        case diffGoods = "DIFF_GOODS"
    }
    public var placementFormatRatio: String?
    public var id: String
    public var title: String
    public var type: ModelType
    public var suggestionType: SuggestionType
    public var bannerPlacementType: BannerPlacementType?
    public var supportEnvironment: SupportEnvironment
    public var developEnvironment: DevelopEnvironment
    public var displayCount: Double?
    public var minDisplayCount: Double
    public var maxDisplayCount: Double
    public var activated: Bool
    public var pageName: String
    public var clientId: String
    public var injector: Injector?
    public var screenShot: String
    public var displayFormatWidth: Double?
    public var displayFormatHeight: Double?
    public var property: Property?
    public var displayPositions: [Double]?
    public var fixedProductIds: [String]?
    public var tableSize: [Double]?
    public var widgetValueId: String?
    public var productDetailDataColumns: [String]?
    public var includingCategoryIds: [String]?
    public var excludingCategoryIds: [String]?
    public var createdAt: Date
    public var updatedAt: Date
    public var deletedAt: Date?
    public var placementDeactivated: Bool

    public init(placementFormatRatio: String?, id: String, title: String, type: ModelType, suggestionType: SuggestionType, bannerPlacementType: BannerPlacementType?, supportEnvironment: SupportEnvironment, developEnvironment: DevelopEnvironment, displayCount: Double?, minDisplayCount: Double, maxDisplayCount: Double, activated: Bool, pageName: String, clientId: String, injector: Injector?, screenShot: String, displayFormatWidth: Double?, displayFormatHeight: Double?, property: Property?, displayPositions: [Double]?, fixedProductIds: [String]?, tableSize: [Double]?, widgetValueId: String?, productDetailDataColumns: [String]?, includingCategoryIds: [String]?, excludingCategoryIds: [String]?, createdAt: Date, updatedAt: Date, deletedAt: Date?, placementDeactivated: Bool) {
        self.placementFormatRatio = placementFormatRatio
        self.id = id
        self.title = title
        self.type = type
        self.suggestionType = suggestionType
        self.bannerPlacementType = bannerPlacementType
        self.supportEnvironment = supportEnvironment
        self.developEnvironment = developEnvironment
        self.displayCount = displayCount
        self.minDisplayCount = minDisplayCount
        self.maxDisplayCount = maxDisplayCount
        self.activated = activated
        self.pageName = pageName
        self.clientId = clientId
        self.injector = injector
        self.screenShot = screenShot
        self.displayFormatWidth = displayFormatWidth
        self.displayFormatHeight = displayFormatHeight
        self.property = property
        self.displayPositions = displayPositions
        self.fixedProductIds = fixedProductIds
        self.tableSize = tableSize
        self.widgetValueId = widgetValueId
        self.productDetailDataColumns = productDetailDataColumns
        self.includingCategoryIds = includingCategoryIds
        self.excludingCategoryIds = excludingCategoryIds
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.deletedAt = deletedAt
        self.placementDeactivated = placementDeactivated
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case placementFormatRatio
        case id
        case title
        case type
        case suggestionType
        case bannerPlacementType
        case supportEnvironment
        case developEnvironment
        case displayCount
        case minDisplayCount
        case maxDisplayCount
        case activated
        case pageName
        case clientId
        case injector
        case screenShot
        case displayFormatWidth
        case displayFormatHeight
        case property
        case displayPositions
        case fixedProductIds
        case tableSize
        case widgetValueId
        case productDetailDataColumns
        case includingCategoryIds
        case excludingCategoryIds
        case createdAt
        case updatedAt
        case deletedAt
        case placementDeactivated
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(placementFormatRatio, forKey: .placementFormatRatio)
        try container.encode(id, forKey: .id)
        try container.encode(title, forKey: .title)
        try container.encode(type, forKey: .type)
        try container.encode(suggestionType, forKey: .suggestionType)
        try container.encode(bannerPlacementType, forKey: .bannerPlacementType)
        try container.encode(supportEnvironment, forKey: .supportEnvironment)
        try container.encode(developEnvironment, forKey: .developEnvironment)
        try container.encode(displayCount, forKey: .displayCount)
        try container.encode(minDisplayCount, forKey: .minDisplayCount)
        try container.encode(maxDisplayCount, forKey: .maxDisplayCount)
        try container.encode(activated, forKey: .activated)
        try container.encode(pageName, forKey: .pageName)
        try container.encode(clientId, forKey: .clientId)
        try container.encode(injector, forKey: .injector)
        try container.encode(screenShot, forKey: .screenShot)
        try container.encode(displayFormatWidth, forKey: .displayFormatWidth)
        try container.encode(displayFormatHeight, forKey: .displayFormatHeight)
        try container.encode(property, forKey: .property)
        try container.encode(displayPositions, forKey: .displayPositions)
        try container.encode(fixedProductIds, forKey: .fixedProductIds)
        try container.encode(tableSize, forKey: .tableSize)
        try container.encode(widgetValueId, forKey: .widgetValueId)
        try container.encode(productDetailDataColumns, forKey: .productDetailDataColumns)
        try container.encode(includingCategoryIds, forKey: .includingCategoryIds)
        try container.encode(excludingCategoryIds, forKey: .excludingCategoryIds)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encode(deletedAt, forKey: .deletedAt)
        try container.encode(placementDeactivated, forKey: .placementDeactivated)
    }
}

