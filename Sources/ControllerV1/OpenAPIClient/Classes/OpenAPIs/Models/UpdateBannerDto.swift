//
// UpdateBannerDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UpdateBannerDto: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: 2, maxLength: 20, pattern: nil)
    public var activated: Bool
    public var name: String
    public var creatives: [UpsertCreativeDto]
    public var placementIds: [String]
    public var url: String?
    public var data: AnyCodable
    public var deepLink: String?
    public var appRoute: String?
    public var startsAt: Date
    public var endsAt: Date?
    public var categoryId: String?
    public var productId: String?

    public init(activated: Bool, name: String, creatives: [UpsertCreativeDto], placementIds: [String], url: String? = nil, data: AnyCodable, deepLink: String?, appRoute: String?, startsAt: Date, endsAt: Date? = nil, categoryId: String?, productId: String?) {
        self.activated = activated
        self.name = name
        self.creatives = creatives
        self.placementIds = placementIds
        self.url = url
        self.data = data
        self.deepLink = deepLink
        self.appRoute = appRoute
        self.startsAt = startsAt
        self.endsAt = endsAt
        self.categoryId = categoryId
        self.productId = productId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case activated
        case name
        case creatives
        case placementIds
        case url
        case data
        case deepLink
        case appRoute
        case startsAt
        case endsAt
        case categoryId
        case productId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(activated, forKey: .activated)
        try container.encode(name, forKey: .name)
        try container.encode(creatives, forKey: .creatives)
        try container.encode(placementIds, forKey: .placementIds)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encode(data, forKey: .data)
        try container.encode(deepLink, forKey: .deepLink)
        try container.encode(appRoute, forKey: .appRoute)
        try container.encode(startsAt, forKey: .startsAt)
        try container.encodeIfPresent(endsAt, forKey: .endsAt)
        try container.encode(categoryId, forKey: .categoryId)
        try container.encode(productId, forKey: .productId)
    }
}

