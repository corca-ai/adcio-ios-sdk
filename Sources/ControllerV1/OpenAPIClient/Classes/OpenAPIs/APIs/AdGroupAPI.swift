//
// AdGroupAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AdGroupAPI {

    /**

     - parameter createAdGroupDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adGroupControllerCreate(createAdGroupDto: CreateAdGroupDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdGroup?, _ error: Error?) -> Void)) -> RequestTask {
        return adGroupControllerCreateWithRequestBuilder(createAdGroupDto: createAdGroupDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /ad-group
     - BASIC:
       - type: http
       - name: accessToken
     - parameter createAdGroupDto: (body)  
     - returns: RequestBuilder<AdGroup> 
     */
    open class func adGroupControllerCreateWithRequestBuilder(createAdGroupDto: CreateAdGroupDto) -> RequestBuilder<AdGroup> {
        let localVariablePath = "/ad-group"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createAdGroupDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdGroup>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adGroupControllerDelete(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return adGroupControllerDeleteWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /ad-group/{id}
     - BASIC:
       - type: http
       - name: accessToken
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func adGroupControllerDeleteWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/ad-group/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter orderBy: (query) AdGroupProductSortOption (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adGroupControllerFetchAdGroupProducts(id: String, orderBy: [String]? = nil, limit: Double? = nil, offset: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdGroupControllerFetchAdGroupProducts200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return adGroupControllerFetchAdGroupProductsWithRequestBuilder(id: id, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /ad-group/{id}/products
     - BASIC:
       - type: http
       - name: accessToken
     - parameter id: (path)  
     - parameter orderBy: (query) AdGroupProductSortOption (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - returns: RequestBuilder<AdGroupControllerFetchAdGroupProducts200Response> 
     */
    open class func adGroupControllerFetchAdGroupProductsWithRequestBuilder(id: String, orderBy: [String]? = nil, limit: Double? = nil, offset: Double? = nil) -> RequestBuilder<AdGroupControllerFetchAdGroupProducts200Response> {
        var localVariablePath = "/ad-group/{id}/products"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "orderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdGroupControllerFetchAdGroupProducts200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter orderBy: (query) AdGroupSortOption (optional)
     - parameter campaignId: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adGroupControllerFetchAdGroups(orderBy: [String]? = nil, campaignId: String? = nil, limit: Double? = nil, offset: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdGroupControllerFetchAdGroups200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return adGroupControllerFetchAdGroupsWithRequestBuilder(orderBy: orderBy, campaignId: campaignId, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /ad-group
     - BASIC:
       - type: http
       - name: accessToken
     - parameter orderBy: (query) AdGroupSortOption (optional)
     - parameter campaignId: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - returns: RequestBuilder<AdGroupControllerFetchAdGroups200Response> 
     */
    open class func adGroupControllerFetchAdGroupsWithRequestBuilder(orderBy: [String]? = nil, campaignId: String? = nil, limit: Double? = nil, offset: Double? = nil) -> RequestBuilder<AdGroupControllerFetchAdGroups200Response> {
        let localVariablePath = "/ad-group"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "orderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "campaignId": (wrappedValue: campaignId?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdGroupControllerFetchAdGroups200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adGroupControllerFetchAllBudget(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [FetchAdGroupBudgetResponseDto]?, _ error: Error?) -> Void)) -> RequestTask {
        return adGroupControllerFetchAllBudgetWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /ad-group/all/budget
     - returns: RequestBuilder<[FetchAdGroupBudgetResponseDto]> 
     */
    open class func adGroupControllerFetchAllBudgetWithRequestBuilder() -> RequestBuilder<[FetchAdGroupBudgetResponseDto]> {
        let localVariablePath = "/ad-group/all/budget"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[FetchAdGroupBudgetResponseDto]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter campaignIds: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adGroupControllerFetchManyAdGroupTitles(campaignIds: [String]? = nil, title: String? = nil, limit: Double? = nil, offset: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [FetchAdGroupTitleResponseDto]?, _ error: Error?) -> Void)) -> RequestTask {
        return adGroupControllerFetchManyAdGroupTitlesWithRequestBuilder(campaignIds: campaignIds, title: title, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /ad-group/all/titles
     - BASIC:
       - type: http
       - name: accessToken
     - parameter campaignIds: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - returns: RequestBuilder<[FetchAdGroupTitleResponseDto]> 
     */
    open class func adGroupControllerFetchManyAdGroupTitlesWithRequestBuilder(campaignIds: [String]? = nil, title: String? = nil, limit: Double? = nil, offset: Double? = nil) -> RequestBuilder<[FetchAdGroupTitleResponseDto]> {
        let localVariablePath = "/ad-group/all/titles"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "campaignIds": (wrappedValue: campaignIds?.encodeToJSON(), isExplode: true),
            "title": (wrappedValue: title?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[FetchAdGroupTitleResponseDto]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter reviewStatus: (query)  (optional)
     - parameter orderBy: (query) AdGroupOfStoreSortOption (optional)
     - parameter adGroupIds: (query)  (optional)
     - parameter sellerIds: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adGroupControllerFetchManyAdGroupsOfStore(reviewStatus: AdGroupReviewStatus? = nil, orderBy: [String]? = nil, adGroupIds: [String]? = nil, sellerIds: [String]? = nil, limit: Double? = nil, offset: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdGroupControllerFetchManyAdGroupsOfStore200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return adGroupControllerFetchManyAdGroupsOfStoreWithRequestBuilder(reviewStatus: reviewStatus, orderBy: orderBy, adGroupIds: adGroupIds, sellerIds: sellerIds, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /ad-group/all/of-store
     - BASIC:
       - type: http
       - name: accessToken
     - parameter reviewStatus: (query)  (optional)
     - parameter orderBy: (query) AdGroupOfStoreSortOption (optional)
     - parameter adGroupIds: (query)  (optional)
     - parameter sellerIds: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - returns: RequestBuilder<AdGroupControllerFetchManyAdGroupsOfStore200Response> 
     */
    open class func adGroupControllerFetchManyAdGroupsOfStoreWithRequestBuilder(reviewStatus: AdGroupReviewStatus? = nil, orderBy: [String]? = nil, adGroupIds: [String]? = nil, sellerIds: [String]? = nil, limit: Double? = nil, offset: Double? = nil) -> RequestBuilder<AdGroupControllerFetchManyAdGroupsOfStore200Response> {
        let localVariablePath = "/ad-group/all/of-store"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "reviewStatus": (wrappedValue: reviewStatus?.encodeToJSON(), isExplode: true),
            "orderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "adGroupIds": (wrappedValue: adGroupIds?.encodeToJSON(), isExplode: true),
            "sellerIds": (wrappedValue: sellerIds?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdGroupControllerFetchManyAdGroupsOfStore200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adGroupControllerFetchOne(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: FetchAdGroupResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return adGroupControllerFetchOneWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /ad-group/{id}
     - BASIC:
       - type: http
       - name: accessToken
     - parameter id: (path)  
     - returns: RequestBuilder<FetchAdGroupResponseDto> 
     */
    open class func adGroupControllerFetchOneWithRequestBuilder(id: String) -> RequestBuilder<FetchAdGroupResponseDto> {
        var localVariablePath = "/ad-group/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FetchAdGroupResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter updateAdGroupDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adGroupControllerUpdate(id: String, updateAdGroupDto: UpdateAdGroupDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return adGroupControllerUpdateWithRequestBuilder(id: id, updateAdGroupDto: updateAdGroupDto).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /ad-group/{id}
     - BASIC:
       - type: http
       - name: accessToken
     - parameter id: (path)  
     - parameter updateAdGroupDto: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func adGroupControllerUpdateWithRequestBuilder(id: String, updateAdGroupDto: UpdateAdGroupDto) -> RequestBuilder<Void> {
        var localVariablePath = "/ad-group/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateAdGroupDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter updateUsedBudgetDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adGroupControllerUpdateBudget(updateUsedBudgetDto: UpdateUsedBudgetDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return adGroupControllerUpdateBudgetWithRequestBuilder(updateUsedBudgetDto: updateUsedBudgetDto).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /ad-group/budget
     - parameter updateUsedBudgetDto: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func adGroupControllerUpdateBudgetWithRequestBuilder(updateUsedBudgetDto: UpdateUsedBudgetDto) -> RequestBuilder<Void> {
        let localVariablePath = "/ad-group/budget"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateUsedBudgetDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adGroupReviewControllerFetchAdGroupReviewCount(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: FetchAdGroupReviewCountResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return adGroupReviewControllerFetchAdGroupReviewCountWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /ad-group-reviews/count
     - BASIC:
       - type: http
       - name: accessToken
     - returns: RequestBuilder<FetchAdGroupReviewCountResponseDto> 
     */
    open class func adGroupReviewControllerFetchAdGroupReviewCountWithRequestBuilder() -> RequestBuilder<FetchAdGroupReviewCountResponseDto> {
        let localVariablePath = "/ad-group-reviews/count"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FetchAdGroupReviewCountResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adGroupReviewControllerFetchAdGroupReviewDetail(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: FetchAdGroupReviewDetailResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return adGroupReviewControllerFetchAdGroupReviewDetailWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /ad-group-reviews/{id}
     - BASIC:
       - type: http
       - name: accessToken
     - parameter id: (path)  
     - returns: RequestBuilder<FetchAdGroupReviewDetailResponseDto> 
     */
    open class func adGroupReviewControllerFetchAdGroupReviewDetailWithRequestBuilder(id: String) -> RequestBuilder<FetchAdGroupReviewDetailResponseDto> {
        var localVariablePath = "/ad-group-reviews/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FetchAdGroupReviewDetailResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter adGroupId: (path)  
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adGroupReviewControllerFetchAdGroupReviewHistories(adGroupId: String, limit: Double? = nil, offset: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdGroupReviewControllerFetchAdGroupReviewHistories200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return adGroupReviewControllerFetchAdGroupReviewHistoriesWithRequestBuilder(adGroupId: adGroupId, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /ad-group-reviews/ad-groups/{adGroupId}
     - BASIC:
       - type: http
       - name: accessToken
     - parameter adGroupId: (path)  
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - returns: RequestBuilder<AdGroupReviewControllerFetchAdGroupReviewHistories200Response> 
     */
    open class func adGroupReviewControllerFetchAdGroupReviewHistoriesWithRequestBuilder(adGroupId: String, limit: Double? = nil, offset: Double? = nil) -> RequestBuilder<AdGroupReviewControllerFetchAdGroupReviewHistories200Response> {
        var localVariablePath = "/ad-group-reviews/ad-groups/{adGroupId}"
        let adGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(adGroupId))"
        let adGroupIdPostEscape = adGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{adGroupId}", with: adGroupIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdGroupReviewControllerFetchAdGroupReviewHistories200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter processAdGroupReviewDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adGroupReviewControllerProcessAdGroupReview(id: String, processAdGroupReviewDto: ProcessAdGroupReviewDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProcessAdGroupReviewResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return adGroupReviewControllerProcessAdGroupReviewWithRequestBuilder(id: id, processAdGroupReviewDto: processAdGroupReviewDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /ad-group-reviews/{id}
     - BASIC:
       - type: http
       - name: accessToken
     - parameter id: (path)  
     - parameter processAdGroupReviewDto: (body)  
     - returns: RequestBuilder<ProcessAdGroupReviewResponseDto> 
     */
    open class func adGroupReviewControllerProcessAdGroupReviewWithRequestBuilder(id: String, processAdGroupReviewDto: ProcessAdGroupReviewDto) -> RequestBuilder<ProcessAdGroupReviewResponseDto> {
        var localVariablePath = "/ad-group-reviews/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: processAdGroupReviewDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessAdGroupReviewResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter adGroupId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adGroupReviewControllerRequestAdGroupReview(adGroupId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: RequestAdGroupReviewResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return adGroupReviewControllerRequestAdGroupReviewWithRequestBuilder(adGroupId: adGroupId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /ad-group-reviews/ad-groups/{adGroupId}
     - BASIC:
       - type: http
       - name: accessToken
     - parameter adGroupId: (path)  
     - returns: RequestBuilder<RequestAdGroupReviewResponseDto> 
     */
    open class func adGroupReviewControllerRequestAdGroupReviewWithRequestBuilder(adGroupId: String) -> RequestBuilder<RequestAdGroupReviewResponseDto> {
        var localVariablePath = "/ad-group-reviews/ad-groups/{adGroupId}"
        let adGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(adGroupId))"
        let adGroupIdPostEscape = adGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{adGroupId}", with: adGroupIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RequestAdGroupReviewResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter createAdGroupTargetKeyRequestDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adGroupTargetControllerCreateAdGroupTargetKeys(createAdGroupTargetKeyRequestDto: CreateAdGroupTargetKeyRequestDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreateAdGroupTargetKeyResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return adGroupTargetControllerCreateAdGroupTargetKeysWithRequestBuilder(createAdGroupTargetKeyRequestDto: createAdGroupTargetKeyRequestDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /ad-group/target/keys
     - BASIC:
       - type: http
       - name: accessToken
     - parameter createAdGroupTargetKeyRequestDto: (body)  
     - returns: RequestBuilder<CreateAdGroupTargetKeyResponseDto> 
     */
    open class func adGroupTargetControllerCreateAdGroupTargetKeysWithRequestBuilder(createAdGroupTargetKeyRequestDto: CreateAdGroupTargetKeyRequestDto) -> RequestBuilder<CreateAdGroupTargetKeyResponseDto> {
        let localVariablePath = "/ad-group/target/keys"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createAdGroupTargetKeyRequestDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateAdGroupTargetKeyResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter createAdGroupTargetValueRequestDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adGroupTargetControllerCreateAdGroupTargetValue(id: String, createAdGroupTargetValueRequestDto: CreateAdGroupTargetValueRequestDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreateAdGroupTargetValueResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return adGroupTargetControllerCreateAdGroupTargetValueWithRequestBuilder(id: id, createAdGroupTargetValueRequestDto: createAdGroupTargetValueRequestDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /ad-group/target/keys/{id}/values
     - BASIC:
       - type: http
       - name: accessToken
     - parameter id: (path)  
     - parameter createAdGroupTargetValueRequestDto: (body)  
     - returns: RequestBuilder<CreateAdGroupTargetValueResponseDto> 
     */
    open class func adGroupTargetControllerCreateAdGroupTargetValueWithRequestBuilder(id: String, createAdGroupTargetValueRequestDto: CreateAdGroupTargetValueRequestDto) -> RequestBuilder<CreateAdGroupTargetValueResponseDto> {
        var localVariablePath = "/ad-group/target/keys/{id}/values"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createAdGroupTargetValueRequestDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateAdGroupTargetValueResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter storeId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adGroupTargetControllerFetchAdGroupTargetKeys(storeId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: FetchAdGroupTargetKeysResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return adGroupTargetControllerFetchAdGroupTargetKeysWithRequestBuilder(storeId: storeId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /ad-group/target/keys
     - BASIC:
       - type: http
       - name: accessToken
     - parameter storeId: (query)  
     - returns: RequestBuilder<FetchAdGroupTargetKeysResponseDto> 
     */
    open class func adGroupTargetControllerFetchAdGroupTargetKeysWithRequestBuilder(storeId: String) -> RequestBuilder<FetchAdGroupTargetKeysResponseDto> {
        let localVariablePath = "/ad-group/target/keys"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "storeId": (wrappedValue: storeId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FetchAdGroupTargetKeysResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
