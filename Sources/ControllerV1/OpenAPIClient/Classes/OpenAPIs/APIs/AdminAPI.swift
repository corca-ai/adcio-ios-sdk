//
// AdminAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AdminAPI {

    /**
     * enum for parameter clientType
     */
    public enum ClientType_adminControllerDeleteClient: String, CaseIterable {
        case store = "STORE"
        case seller = "SELLER"
    }

    /**

     - parameter id: (path)  
     - parameter clientType: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adminControllerDeleteClient(id: String, clientType: ClientType_adminControllerDeleteClient, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Client?, _ error: Error?) -> Void)) -> RequestTask {
        return adminControllerDeleteClientWithRequestBuilder(id: id, clientType: clientType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /admin/clients/{id}
     - parameter id: (path)  
     - parameter clientType: (query)  
     - returns: RequestBuilder<Client> 
     */
    open class func adminControllerDeleteClientWithRequestBuilder(id: String, clientType: ClientType_adminControllerDeleteClient) -> RequestBuilder<Client> {
        var localVariablePath = "/admin/clients/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "clientType": (wrappedValue: clientType.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Client>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter id: (path)  
     - parameter isDeleted: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adminControllerFetchClient(id: String, isDeleted: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: FetchClientAdminResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return adminControllerFetchClientWithRequestBuilder(id: id, isDeleted: isDeleted).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /admin/clients/{id}
     - parameter id: (path)  
     - parameter isDeleted: (query)  (optional)
     - returns: RequestBuilder<FetchClientAdminResponseDto> 
     */
    open class func adminControllerFetchClientWithRequestBuilder(id: String, isDeleted: Bool? = nil) -> RequestBuilder<FetchClientAdminResponseDto> {
        var localVariablePath = "/admin/clients/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "isDeleted": (wrappedValue: isDeleted?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FetchClientAdminResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter isStore: (query)  (optional)
     - parameter isSeller: (query)  (optional)
     - parameter storeId: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter isDeleted: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adminControllerFetchClients(isStore: Bool? = nil, isSeller: Bool? = nil, storeId: String? = nil, name: String? = nil, isDeleted: Bool? = nil, limit: Double? = nil, offset: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdminControllerFetchClients200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return adminControllerFetchClientsWithRequestBuilder(isStore: isStore, isSeller: isSeller, storeId: storeId, name: name, isDeleted: isDeleted, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /admin/clients
     - parameter isStore: (query)  (optional)
     - parameter isSeller: (query)  (optional)
     - parameter storeId: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter isDeleted: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - returns: RequestBuilder<AdminControllerFetchClients200Response> 
     */
    open class func adminControllerFetchClientsWithRequestBuilder(isStore: Bool? = nil, isSeller: Bool? = nil, storeId: String? = nil, name: String? = nil, isDeleted: Bool? = nil, limit: Double? = nil, offset: Double? = nil) -> RequestBuilder<AdminControllerFetchClients200Response> {
        let localVariablePath = "/admin/clients"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "isStore": (wrappedValue: isStore?.encodeToJSON(), isExplode: true),
            "isSeller": (wrappedValue: isSeller?.encodeToJSON(), isExplode: true),
            "storeId": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "isDeleted": (wrappedValue: isDeleted?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdminControllerFetchClients200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter select
     */
    public enum Select_adminControllerFetchPlacements: String, CaseIterable {
        case id = "id"
        case name = "name"
        case imageurl = "imageUrl"
        case url = "url"
        case data = "data"
        case activated = "activated"
        case startsat = "startsAt"
        case endsat = "endsAt"
        case createdat = "createdAt"
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_adminControllerFetchPlacements: String, CaseIterable {
        case grid = "GRID"
        case banner = "BANNER"
    }

    /**

     - parameter select: (query)  (optional)
     - parameter clientId: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adminControllerFetchPlacements(select: [Select_adminControllerFetchPlacements]? = nil, clientId: String? = nil, title: String? = nil, type: ModelType_adminControllerFetchPlacements? = nil, limit: Double? = nil, offset: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdminControllerFetchPlacements200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return adminControllerFetchPlacementsWithRequestBuilder(select: select, clientId: clientId, title: title, type: type, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /admin/placements
     - parameter select: (query)  (optional)
     - parameter clientId: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - returns: RequestBuilder<AdminControllerFetchPlacements200Response> 
     */
    open class func adminControllerFetchPlacementsWithRequestBuilder(select: [Select_adminControllerFetchPlacements]? = nil, clientId: String? = nil, title: String? = nil, type: ModelType_adminControllerFetchPlacements? = nil, limit: Double? = nil, offset: Double? = nil) -> RequestBuilder<AdminControllerFetchPlacements200Response> {
        let localVariablePath = "/admin/placements"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "select": (wrappedValue: select?.encodeToJSON(), isExplode: true),
            "clientId": (wrappedValue: clientId?.encodeToJSON(), isExplode: true),
            "title": (wrappedValue: title?.encodeToJSON(), isExplode: true),
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdminControllerFetchPlacements200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adminControllerFetchSystemSetting(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SystemSetting?, _ error: Error?) -> Void)) -> RequestTask {
        return adminControllerFetchSystemSettingWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /admin
     - returns: RequestBuilder<SystemSetting> 
     */
    open class func adminControllerFetchSystemSettingWithRequestBuilder() -> RequestBuilder<SystemSetting> {
        let localVariablePath = "/admin"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SystemSetting>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter id: (path)  
     - parameter updateClientDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adminControllerUpdateClient(id: String, updateClientDto: UpdateClientDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return adminControllerUpdateClientWithRequestBuilder(id: id, updateClientDto: updateClientDto).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /admin/clients/{id}
     - parameter id: (path)  
     - parameter updateClientDto: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func adminControllerUpdateClientWithRequestBuilder(id: String, updateClientDto: UpdateClientDto) -> RequestBuilder<Void> {
        var localVariablePath = "/admin/clients/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateClientDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
