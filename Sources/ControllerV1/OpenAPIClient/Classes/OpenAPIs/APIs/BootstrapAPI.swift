//
// BootstrapAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class BootstrapAPI {

    /**

     - parameter clientId: (query) Client ID. 
     - parameter clientApi: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter placements: (query)  (optional)
     - parameter disableAgent: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func bootstrapControllerBootstrap(clientId: String, clientApi: String? = nil, page: String? = nil, placements: String? = nil, disableAgent: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return bootstrapControllerBootstrapWithRequestBuilder(clientId: clientId, clientApi: clientApi, page: page, placements: placements, disableAgent: disableAgent).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /bootstrap
     - parameter clientId: (query) Client ID. 
     - parameter clientApi: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter placements: (query)  (optional)
     - parameter disableAgent: (query)  (optional)
     - returns: RequestBuilder<String> 
     */
    open class func bootstrapControllerBootstrapWithRequestBuilder(clientId: String, clientApi: String? = nil, page: String? = nil, placements: String? = nil, disableAgent: Bool? = nil) -> RequestBuilder<String> {
        let localVariablePath = "/bootstrap"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "clientId": (wrappedValue: clientId.encodeToJSON(), isExplode: true),
            "clientApi": (wrappedValue: clientApi?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "placements": (wrappedValue: placements?.encodeToJSON(), isExplode: true),
            "disableAgent": (wrappedValue: disableAgent?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
