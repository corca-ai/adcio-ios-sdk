//
// CustomerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CustomerAPI {

    /**
     * enum for parameter within
     */
    public enum Within_customerControllerFetchCarts: String, CaseIterable {
        case _1 = "1"
        case _7 = "7"
        case _30 = "30"
    }

    /**

     - parameter customerId: (query)  
     - parameter clientId: (query)  
     - parameter within: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerControllerFetchCarts(customerId: String, clientId: String, within: Within_customerControllerFetchCarts, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [FetchCartResponseDto]?, _ error: Error?) -> Void)) -> RequestTask {
        return customerControllerFetchCartsWithRequestBuilder(customerId: customerId, clientId: clientId, within: within).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /customer/carts
     - parameter customerId: (query)  
     - parameter clientId: (query)  
     - parameter within: (query)  
     - returns: RequestBuilder<[FetchCartResponseDto]> 
     */
    open class func customerControllerFetchCartsWithRequestBuilder(customerId: String, clientId: String, within: Within_customerControllerFetchCarts) -> RequestBuilder<[FetchCartResponseDto]> {
        let localVariablePath = "/customer/carts"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "customerId": (wrappedValue: customerId.encodeToJSON(), isExplode: true),
            "clientId": (wrappedValue: clientId.encodeToJSON(), isExplode: true),
            "within": (wrappedValue: within.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[FetchCartResponseDto]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter within
     */
    public enum Within_customerControllerFetchOrders: String, CaseIterable {
        case _1 = "1"
        case _7 = "7"
        case _30 = "30"
    }

    /**

     - parameter customerId: (query)  
     - parameter clientId: (query)  
     - parameter within: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerControllerFetchOrders(customerId: String, clientId: String, within: Within_customerControllerFetchOrders, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Order]?, _ error: Error?) -> Void)) -> RequestTask {
        return customerControllerFetchOrdersWithRequestBuilder(customerId: customerId, clientId: clientId, within: within).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /customer/orders
     - parameter customerId: (query)  
     - parameter clientId: (query)  
     - parameter within: (query)  
     - returns: RequestBuilder<[Order]> 
     */
    open class func customerControllerFetchOrdersWithRequestBuilder(customerId: String, clientId: String, within: Within_customerControllerFetchOrders) -> RequestBuilder<[Order]> {
        let localVariablePath = "/customer/orders"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "customerId": (wrappedValue: customerId.encodeToJSON(), isExplode: true),
            "clientId": (wrappedValue: clientId.encodeToJSON(), isExplode: true),
            "within": (wrappedValue: within.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Order]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter within
     */
    public enum Within_customerControllerFetchWishlist: String, CaseIterable {
        case _1 = "1"
        case _7 = "7"
        case _30 = "30"
    }

    /**

     - parameter customerId: (query)  
     - parameter clientId: (query)  
     - parameter within: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerControllerFetchWishlist(customerId: String, clientId: String, within: Within_customerControllerFetchWishlist, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [FetchWishlistResponseDto]?, _ error: Error?) -> Void)) -> RequestTask {
        return customerControllerFetchWishlistWithRequestBuilder(customerId: customerId, clientId: clientId, within: within).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /customer/wishlist
     - parameter customerId: (query)  
     - parameter clientId: (query)  
     - parameter within: (query)  
     - returns: RequestBuilder<[FetchWishlistResponseDto]> 
     */
    open class func customerControllerFetchWishlistWithRequestBuilder(customerId: String, clientId: String, within: Within_customerControllerFetchWishlist) -> RequestBuilder<[FetchWishlistResponseDto]> {
        let localVariablePath = "/customer/wishlist"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "customerId": (wrappedValue: customerId.encodeToJSON(), isExplode: true),
            "clientId": (wrappedValue: clientId.encodeToJSON(), isExplode: true),
            "within": (wrappedValue: within.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[FetchWishlistResponseDto]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
