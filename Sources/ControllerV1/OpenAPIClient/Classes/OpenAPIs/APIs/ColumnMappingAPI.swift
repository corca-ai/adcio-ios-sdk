//
// ColumnMappingAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ColumnMappingAPI {

    /**

     - parameter createCategoryColumnMappingDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func columnMappingControllerCreateCategoryColumnMapping(createCategoryColumnMappingDto: CreateCategoryColumnMappingDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ColumnMapping?, _ error: Error?) -> Void)) -> RequestTask {
        return columnMappingControllerCreateCategoryColumnMappingWithRequestBuilder(createCategoryColumnMappingDto: createCategoryColumnMappingDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /column-mappings/categories
     - parameter createCategoryColumnMappingDto: (body)  
     - returns: RequestBuilder<ColumnMapping> 
     */
    open class func columnMappingControllerCreateCategoryColumnMappingWithRequestBuilder(createCategoryColumnMappingDto: CreateCategoryColumnMappingDto) -> RequestBuilder<ColumnMapping> {
        let localVariablePath = "/column-mappings/categories"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createCategoryColumnMappingDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ColumnMapping>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter createProductColumnMappingDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func columnMappingControllerCreateProductColumnMapping(createProductColumnMappingDto: CreateProductColumnMappingDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ColumnMapping?, _ error: Error?) -> Void)) -> RequestTask {
        return columnMappingControllerCreateProductColumnMappingWithRequestBuilder(createProductColumnMappingDto: createProductColumnMappingDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /column-mappings/products
     - parameter createProductColumnMappingDto: (body)  
     - returns: RequestBuilder<ColumnMapping> 
     */
    open class func columnMappingControllerCreateProductColumnMappingWithRequestBuilder(createProductColumnMappingDto: CreateProductColumnMappingDto) -> RequestBuilder<ColumnMapping> {
        let localVariablePath = "/column-mappings/products"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createProductColumnMappingDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ColumnMapping>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter type: (path)  
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func columnMappingControllerDeleteColumnMapping(type: String, id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return columnMappingControllerDeleteColumnMappingWithRequestBuilder(type: type, id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /column-mappings/{type}/{id}
     - parameter type: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func columnMappingControllerDeleteColumnMappingWithRequestBuilder(type: String, id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/column-mappings/{type}/{id}"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter type: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func columnMappingControllerFetchMany(type: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ColumnMapping]?, _ error: Error?) -> Void)) -> RequestTask {
        return columnMappingControllerFetchManyWithRequestBuilder(type: type).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /column-mappings/{type}
     - parameter type: (path)  
     - returns: RequestBuilder<[ColumnMapping]> 
     */
    open class func columnMappingControllerFetchManyWithRequestBuilder(type: String) -> RequestBuilder<[ColumnMapping]> {
        var localVariablePath = "/column-mappings/{type}"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ColumnMapping]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter id: (path)  
     - parameter updateCategoryColumnMappingDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func columnMappingControllerUpdateCategoryColumnMapping(id: String, updateCategoryColumnMappingDto: UpdateCategoryColumnMappingDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ColumnMapping?, _ error: Error?) -> Void)) -> RequestTask {
        return columnMappingControllerUpdateCategoryColumnMappingWithRequestBuilder(id: id, updateCategoryColumnMappingDto: updateCategoryColumnMappingDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /column-mappings/categories/{id}
     - parameter id: (path)  
     - parameter updateCategoryColumnMappingDto: (body)  
     - returns: RequestBuilder<ColumnMapping> 
     */
    open class func columnMappingControllerUpdateCategoryColumnMappingWithRequestBuilder(id: String, updateCategoryColumnMappingDto: UpdateCategoryColumnMappingDto) -> RequestBuilder<ColumnMapping> {
        var localVariablePath = "/column-mappings/categories/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateCategoryColumnMappingDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ColumnMapping>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter id: (path)  
     - parameter updateProductColumnMappingDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func columnMappingControllerUpdateProductColumnMapping(id: String, updateProductColumnMappingDto: UpdateProductColumnMappingDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ColumnMapping?, _ error: Error?) -> Void)) -> RequestTask {
        return columnMappingControllerUpdateProductColumnMappingWithRequestBuilder(id: id, updateProductColumnMappingDto: updateProductColumnMappingDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /column-mappings/products/{id}
     - parameter id: (path)  
     - parameter updateProductColumnMappingDto: (body)  
     - returns: RequestBuilder<ColumnMapping> 
     */
    open class func columnMappingControllerUpdateProductColumnMappingWithRequestBuilder(id: String, updateProductColumnMappingDto: UpdateProductColumnMappingDto) -> RequestBuilder<ColumnMapping> {
        var localVariablePath = "/column-mappings/products/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateProductColumnMappingDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ColumnMapping>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
