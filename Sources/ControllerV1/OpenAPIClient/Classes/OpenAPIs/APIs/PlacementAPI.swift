//
// PlacementAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PlacementAPI {

    /**

     - parameter id: (path)  
     - parameter connectProductsToPlacementDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func placementControllerConnectProducts(id: String, connectProductsToPlacementDto: ConnectProductsToPlacementDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ConnectProductsToPlacementResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return placementControllerConnectProductsWithRequestBuilder(id: id, connectProductsToPlacementDto: connectProductsToPlacementDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /placements/{id}/products
     - parameter id: (path)  
     - parameter connectProductsToPlacementDto: (body)  
     - returns: RequestBuilder<ConnectProductsToPlacementResponseDto> 
     */
    open class func placementControllerConnectProductsWithRequestBuilder(id: String, connectProductsToPlacementDto: ConnectProductsToPlacementDto) -> RequestBuilder<ConnectProductsToPlacementResponseDto> {
        var localVariablePath = "/placements/{id}/products"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: connectProductsToPlacementDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConnectProductsToPlacementResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter createPlacementDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func placementControllerCreate(createPlacementDto: CreatePlacementDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Placement?, _ error: Error?) -> Void)) -> RequestTask {
        return placementControllerCreateWithRequestBuilder(createPlacementDto: createPlacementDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /placements
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: api-key
     - parameter createPlacementDto: (body)  
     - returns: RequestBuilder<Placement> 
     */
    open class func placementControllerCreateWithRequestBuilder(createPlacementDto: CreatePlacementDto) -> RequestBuilder<Placement> {
        let localVariablePath = "/placements"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createPlacementDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Placement>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter select
     */
    public enum Select_placementControllerFetchMany: String, CaseIterable {
        case id = "id"
        case title = "title"
        case type = "type"
        case suggestiontype = "suggestionType"
        case displaycount = "displayCount"
        case activated = "activated"
        case pagename = "pageName"
        case clientid = "clientId"
        case injector = "injector"
        case screenshot = "screenShot"
        case displayformatwidth = "displayFormatWidth"
        case displayformatheight = "displayFormatHeight"
        case property = "property"
        case placementformatratio = "placementFormatRatio"
        case createdat = "createdAt"
        case updatedat = "updatedAt"
        case deletedat = "deletedAt"
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_placementControllerFetchMany: String, CaseIterable {
        case grid = "GRID"
        case banner = "BANNER"
    }

    /**
     * enum for parameter suggestionType
     */
    public enum SuggestionType_placementControllerFetchMany: String, CaseIterable {
        case recommend = "RECOMMEND"
        case advertise = "ADVERTISE"
    }

    /**

     - parameter orderBy: (query) PlacementSortOption (optional)
     - parameter select: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter startDate: (query)  (optional)
     - parameter endDate: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter suggestionType: (query)  (optional)
     - parameter activated: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func placementControllerFetchMany(orderBy: [String]? = nil, select: [Select_placementControllerFetchMany]? = nil, title: String? = nil, startDate: Date? = nil, endDate: Date? = nil, type: ModelType_placementControllerFetchMany? = nil, suggestionType: SuggestionType_placementControllerFetchMany? = nil, activated: Bool? = nil, limit: Double? = nil, offset: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PlacementControllerFetchMany200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return placementControllerFetchManyWithRequestBuilder(orderBy: orderBy, select: select, title: title, startDate: startDate, endDate: endDate, type: type, suggestionType: suggestionType, activated: activated, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /placements
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: api-key
     - parameter orderBy: (query) PlacementSortOption (optional)
     - parameter select: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter startDate: (query)  (optional)
     - parameter endDate: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter suggestionType: (query)  (optional)
     - parameter activated: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - returns: RequestBuilder<PlacementControllerFetchMany200Response> 
     */
    open class func placementControllerFetchManyWithRequestBuilder(orderBy: [String]? = nil, select: [Select_placementControllerFetchMany]? = nil, title: String? = nil, startDate: Date? = nil, endDate: Date? = nil, type: ModelType_placementControllerFetchMany? = nil, suggestionType: SuggestionType_placementControllerFetchMany? = nil, activated: Bool? = nil, limit: Double? = nil, offset: Double? = nil) -> RequestBuilder<PlacementControllerFetchMany200Response> {
        let localVariablePath = "/placements"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "orderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "select": (wrappedValue: select?.encodeToJSON(), isExplode: true),
            "title": (wrappedValue: title?.encodeToJSON(), isExplode: true),
            "startDate": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
            "endDate": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "suggestionType": (wrappedValue: suggestionType?.encodeToJSON(), isExplode: true),
            "activated": (wrappedValue: activated?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PlacementControllerFetchMany200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func placementControllerFetchOne(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: FetchPlacementResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return placementControllerFetchOneWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /placements/{id}
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: api-key
     - parameter id: (path)  
     - returns: RequestBuilder<FetchPlacementResponseDto> 
     */
    open class func placementControllerFetchOneWithRequestBuilder(id: String) -> RequestBuilder<FetchPlacementResponseDto> {
        var localVariablePath = "/placements/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FetchPlacementResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func placementControllerRemove(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return placementControllerRemoveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /placements/{id}
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: api-key
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func placementControllerRemoveWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/placements/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter productId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func placementControllerRemoveProduct(id: String, productId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: RemoveProductFromPlacementResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return placementControllerRemoveProductWithRequestBuilder(id: id, productId: productId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /placements/{id}/products/{productId}
     - parameter id: (path)  
     - parameter productId: (path)  
     - returns: RequestBuilder<RemoveProductFromPlacementResponseDto> 
     */
    open class func placementControllerRemoveProductWithRequestBuilder(id: String, productId: String) -> RequestBuilder<RemoveProductFromPlacementResponseDto> {
        var localVariablePath = "/placements/{id}/products/{productId}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let productIdPreEscape = "\(APIHelper.mapValueToPathItem(productId))"
        let productIdPostEscape = productIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{productId}", with: productIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RemoveProductFromPlacementResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter id: (path)  
     - parameter updatePlacementDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func placementControllerUpdate(id: String, updatePlacementDto: UpdatePlacementDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UpdatePlacementResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return placementControllerUpdateWithRequestBuilder(id: id, updatePlacementDto: updatePlacementDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /placements/{id}
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: api-key
     - parameter id: (path)  
     - parameter updatePlacementDto: (body)  
     - returns: RequestBuilder<UpdatePlacementResponseDto> 
     */
    open class func placementControllerUpdateWithRequestBuilder(id: String, updatePlacementDto: UpdatePlacementDto) -> RequestBuilder<UpdatePlacementResponseDto> {
        var localVariablePath = "/placements/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updatePlacementDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UpdatePlacementResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter screenShot: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func placementControllerUpdateScreenShot(id: String, screenShot: URL, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return placementControllerUpdateScreenShotWithRequestBuilder(id: id, screenShot: screenShot).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /placements/{id}/screenShot
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: api-key
     - parameter id: (path)  
     - parameter screenShot: (form)  
     - returns: RequestBuilder<Void> 
     */
    open class func placementControllerUpdateScreenShotWithRequestBuilder(id: String, screenShot: URL) -> RequestBuilder<Void> {
        var localVariablePath = "/placements/{id}/screenShot"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "screenShot": screenShot.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
