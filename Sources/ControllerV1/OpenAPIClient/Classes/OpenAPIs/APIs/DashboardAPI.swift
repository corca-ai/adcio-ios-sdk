//
// DashboardAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DashboardAPI {

    /**

     - parameter placementIds: (query)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter orderBy: (query) DashboardItemSortOption (optional)
     - parameter bannerIds: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func dashboardControllerExtractCsvOnBannerDashboard(placementIds: [String], startDate: Date, endDate: Date, orderBy: [String]? = nil, bannerIds: [String]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ExtractCsvOnDashboardResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return dashboardControllerExtractCsvOnBannerDashboardWithRequestBuilder(placementIds: placementIds, startDate: startDate, endDate: endDate, orderBy: orderBy, bannerIds: bannerIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /dashboard/banners/csv
     - parameter placementIds: (query)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter orderBy: (query) DashboardItemSortOption (optional)
     - parameter bannerIds: (query)  (optional)
     - returns: RequestBuilder<ExtractCsvOnDashboardResponseDto> 
     */
    open class func dashboardControllerExtractCsvOnBannerDashboardWithRequestBuilder(placementIds: [String], startDate: Date, endDate: Date, orderBy: [String]? = nil, bannerIds: [String]? = nil) -> RequestBuilder<ExtractCsvOnDashboardResponseDto> {
        let localVariablePath = "/dashboard/banners/csv"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "orderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "bannerIds": (wrappedValue: bannerIds?.encodeToJSON(), isExplode: true),
            "placementIds": (wrappedValue: placementIds.encodeToJSON(), isExplode: true),
            "startDate": (wrappedValue: startDate.encodeToJSON(), isExplode: true),
            "endDate": (wrappedValue: endDate.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExtractCsvOnDashboardResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter placementIds: (query)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter orderBy: (query) DashboardItemSortOption (optional)
     - parameter productIds: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func dashboardControllerExtractCsvOnProductDashboard(placementIds: [String], startDate: Date, endDate: Date, orderBy: [String]? = nil, productIds: [String]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ExtractCsvOnDashboardResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return dashboardControllerExtractCsvOnProductDashboardWithRequestBuilder(placementIds: placementIds, startDate: startDate, endDate: endDate, orderBy: orderBy, productIds: productIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /dashboard/products/csv
     - parameter placementIds: (query)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter orderBy: (query) DashboardItemSortOption (optional)
     - parameter productIds: (query)  (optional)
     - returns: RequestBuilder<ExtractCsvOnDashboardResponseDto> 
     */
    open class func dashboardControllerExtractCsvOnProductDashboardWithRequestBuilder(placementIds: [String], startDate: Date, endDate: Date, orderBy: [String]? = nil, productIds: [String]? = nil) -> RequestBuilder<ExtractCsvOnDashboardResponseDto> {
        let localVariablePath = "/dashboard/products/csv"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "orderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "productIds": (wrappedValue: productIds?.encodeToJSON(), isExplode: true),
            "placementIds": (wrappedValue: placementIds.encodeToJSON(), isExplode: true),
            "startDate": (wrappedValue: startDate.encodeToJSON(), isExplode: true),
            "endDate": (wrappedValue: endDate.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExtractCsvOnDashboardResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter timezone
     */
    public enum Timezone_dashboardControllerFetchAdsetEfficienciesOnSellerAdGroupDashboard: String, CaseIterable {
        case kst = "KST"
        case ict = "ICT"
        case est = "EST"
        case cst = "CST"
        case mst = "MST"
        case pst = "PST"
        case akst = "AKST"
        case hst = "HST"
    }

    /**

     - parameter campaignId: (path)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter timezone: (query)  
     - parameter orderBy: (query) AdGroupDashboardAdsetSortOption (optional)
     - parameter adGroupIds: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func dashboardControllerFetchAdsetEfficienciesOnSellerAdGroupDashboard(campaignId: String, startDate: Date, endDate: Date, timezone: Timezone_dashboardControllerFetchAdsetEfficienciesOnSellerAdGroupDashboard, orderBy: [String]? = nil, adGroupIds: [String]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: FetchAdsetEfficienciesOnSellerAdGroupDashboardResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return dashboardControllerFetchAdsetEfficienciesOnSellerAdGroupDashboardWithRequestBuilder(campaignId: campaignId, startDate: startDate, endDate: endDate, timezone: timezone, orderBy: orderBy, adGroupIds: adGroupIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /dashboard/campaigns/{campaignId}/ad-group-adset-efficiencies
     - parameter campaignId: (path)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter timezone: (query)  
     - parameter orderBy: (query) AdGroupDashboardAdsetSortOption (optional)
     - parameter adGroupIds: (query)  (optional)
     - returns: RequestBuilder<FetchAdsetEfficienciesOnSellerAdGroupDashboardResponseDto> 
     */
    open class func dashboardControllerFetchAdsetEfficienciesOnSellerAdGroupDashboardWithRequestBuilder(campaignId: String, startDate: Date, endDate: Date, timezone: Timezone_dashboardControllerFetchAdsetEfficienciesOnSellerAdGroupDashboard, orderBy: [String]? = nil, adGroupIds: [String]? = nil) -> RequestBuilder<FetchAdsetEfficienciesOnSellerAdGroupDashboardResponseDto> {
        var localVariablePath = "/dashboard/campaigns/{campaignId}/ad-group-adset-efficiencies"
        let campaignIdPreEscape = "\(APIHelper.mapValueToPathItem(campaignId))"
        let campaignIdPostEscape = campaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{campaignId}", with: campaignIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "orderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "adGroupIds": (wrappedValue: adGroupIds?.encodeToJSON(), isExplode: true),
            "startDate": (wrappedValue: startDate.encodeToJSON(), isExplode: true),
            "endDate": (wrappedValue: endDate.encodeToJSON(), isExplode: true),
            "timezone": (wrappedValue: timezone.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FetchAdsetEfficienciesOnSellerAdGroupDashboardResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter placementIds: (query)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter orderBy: (query) DashboardItemSortOption (optional)
     - parameter bannerIds: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func dashboardControllerFetchListOnBannerDashboard(placementIds: [String], startDate: Date, endDate: Date, orderBy: [String]? = nil, bannerIds: [String]? = nil, limit: Double? = nil, offset: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DashboardControllerFetchListOnBannerDashboard200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return dashboardControllerFetchListOnBannerDashboardWithRequestBuilder(placementIds: placementIds, startDate: startDate, endDate: endDate, orderBy: orderBy, bannerIds: bannerIds, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /dashboard/banners
     - parameter placementIds: (query)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter orderBy: (query) DashboardItemSortOption (optional)
     - parameter bannerIds: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - returns: RequestBuilder<DashboardControllerFetchListOnBannerDashboard200Response> 
     */
    open class func dashboardControllerFetchListOnBannerDashboardWithRequestBuilder(placementIds: [String], startDate: Date, endDate: Date, orderBy: [String]? = nil, bannerIds: [String]? = nil, limit: Double? = nil, offset: Double? = nil) -> RequestBuilder<DashboardControllerFetchListOnBannerDashboard200Response> {
        let localVariablePath = "/dashboard/banners"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "orderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "bannerIds": (wrappedValue: bannerIds?.encodeToJSON(), isExplode: true),
            "placementIds": (wrappedValue: placementIds.encodeToJSON(), isExplode: true),
            "startDate": (wrappedValue: startDate.encodeToJSON(), isExplode: true),
            "endDate": (wrappedValue: endDate.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DashboardControllerFetchListOnBannerDashboard200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter placementIds: (query)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter orderBy: (query) DashboardItemSortOption (optional)
     - parameter productIds: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func dashboardControllerFetchListOnProductDashboard(placementIds: [String], startDate: Date, endDate: Date, orderBy: [String]? = nil, productIds: [String]? = nil, limit: Double? = nil, offset: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DashboardControllerFetchListOnProductDashboard200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return dashboardControllerFetchListOnProductDashboardWithRequestBuilder(placementIds: placementIds, startDate: startDate, endDate: endDate, orderBy: orderBy, productIds: productIds, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /dashboard/products
     - parameter placementIds: (query)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter orderBy: (query) DashboardItemSortOption (optional)
     - parameter productIds: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - returns: RequestBuilder<DashboardControllerFetchListOnProductDashboard200Response> 
     */
    open class func dashboardControllerFetchListOnProductDashboardWithRequestBuilder(placementIds: [String], startDate: Date, endDate: Date, orderBy: [String]? = nil, productIds: [String]? = nil, limit: Double? = nil, offset: Double? = nil) -> RequestBuilder<DashboardControllerFetchListOnProductDashboard200Response> {
        let localVariablePath = "/dashboard/products"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "orderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "productIds": (wrappedValue: productIds?.encodeToJSON(), isExplode: true),
            "placementIds": (wrappedValue: placementIds.encodeToJSON(), isExplode: true),
            "startDate": (wrappedValue: startDate.encodeToJSON(), isExplode: true),
            "endDate": (wrappedValue: endDate.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DashboardControllerFetchListOnProductDashboard200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter timezone
     */
    public enum Timezone_dashboardControllerFetchListOnSellerAdGroupDashboard: String, CaseIterable {
        case kst = "KST"
        case ict = "ICT"
        case est = "EST"
        case cst = "CST"
        case mst = "MST"
        case pst = "PST"
        case akst = "AKST"
        case hst = "HST"
    }

    /**

     - parameter campaignId: (path)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter timezone: (query)  
     - parameter orderBy: (query) AdGroupDashboardSortOption (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func dashboardControllerFetchListOnSellerAdGroupDashboard(campaignId: String, startDate: Date, endDate: Date, timezone: Timezone_dashboardControllerFetchListOnSellerAdGroupDashboard, orderBy: [String]? = nil, limit: Double? = nil, offset: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DashboardControllerFetchListOnSellerAdGroupDashboard200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return dashboardControllerFetchListOnSellerAdGroupDashboardWithRequestBuilder(campaignId: campaignId, startDate: startDate, endDate: endDate, timezone: timezone, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /dashboard/campaigns/{campaignId}/ad-groups
     - parameter campaignId: (path)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter timezone: (query)  
     - parameter orderBy: (query) AdGroupDashboardSortOption (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - returns: RequestBuilder<DashboardControllerFetchListOnSellerAdGroupDashboard200Response> 
     */
    open class func dashboardControllerFetchListOnSellerAdGroupDashboardWithRequestBuilder(campaignId: String, startDate: Date, endDate: Date, timezone: Timezone_dashboardControllerFetchListOnSellerAdGroupDashboard, orderBy: [String]? = nil, limit: Double? = nil, offset: Double? = nil) -> RequestBuilder<DashboardControllerFetchListOnSellerAdGroupDashboard200Response> {
        var localVariablePath = "/dashboard/campaigns/{campaignId}/ad-groups"
        let campaignIdPreEscape = "\(APIHelper.mapValueToPathItem(campaignId))"
        let campaignIdPostEscape = campaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{campaignId}", with: campaignIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "orderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "startDate": (wrappedValue: startDate.encodeToJSON(), isExplode: true),
            "endDate": (wrappedValue: endDate.encodeToJSON(), isExplode: true),
            "timezone": (wrappedValue: timezone.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DashboardControllerFetchListOnSellerAdGroupDashboard200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter timezone
     */
    public enum Timezone_dashboardControllerFetchMetricsOnBannerDashboard: String, CaseIterable {
        case kst = "KST"
        case ict = "ICT"
        case est = "EST"
        case cst = "CST"
        case mst = "MST"
        case pst = "PST"
        case akst = "AKST"
        case hst = "HST"
    }

    /**

     - parameter placementIds: (query)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter timezone: (query)  
     - parameter bannerIds: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func dashboardControllerFetchMetricsOnBannerDashboard(placementIds: [String], startDate: Date, endDate: Date, timezone: Timezone_dashboardControllerFetchMetricsOnBannerDashboard, bannerIds: [String]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: FetchMetricsOnDashboardResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return dashboardControllerFetchMetricsOnBannerDashboardWithRequestBuilder(placementIds: placementIds, startDate: startDate, endDate: endDate, timezone: timezone, bannerIds: bannerIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /dashboard/metric/banners
     - parameter placementIds: (query)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter timezone: (query)  
     - parameter bannerIds: (query)  (optional)
     - returns: RequestBuilder<FetchMetricsOnDashboardResponseDto> 
     */
    open class func dashboardControllerFetchMetricsOnBannerDashboardWithRequestBuilder(placementIds: [String], startDate: Date, endDate: Date, timezone: Timezone_dashboardControllerFetchMetricsOnBannerDashboard, bannerIds: [String]? = nil) -> RequestBuilder<FetchMetricsOnDashboardResponseDto> {
        let localVariablePath = "/dashboard/metric/banners"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "bannerIds": (wrappedValue: bannerIds?.encodeToJSON(), isExplode: true),
            "placementIds": (wrappedValue: placementIds.encodeToJSON(), isExplode: true),
            "startDate": (wrappedValue: startDate.encodeToJSON(), isExplode: true),
            "endDate": (wrappedValue: endDate.encodeToJSON(), isExplode: true),
            "timezone": (wrappedValue: timezone.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FetchMetricsOnDashboardResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter timezone
     */
    public enum Timezone_dashboardControllerFetchMetricsOnProductDashboard: String, CaseIterable {
        case kst = "KST"
        case ict = "ICT"
        case est = "EST"
        case cst = "CST"
        case mst = "MST"
        case pst = "PST"
        case akst = "AKST"
        case hst = "HST"
    }

    /**

     - parameter placementIds: (query)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter timezone: (query)  
     - parameter productIds: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func dashboardControllerFetchMetricsOnProductDashboard(placementIds: [String], startDate: Date, endDate: Date, timezone: Timezone_dashboardControllerFetchMetricsOnProductDashboard, productIds: [String]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: FetchMetricsOnDashboardResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return dashboardControllerFetchMetricsOnProductDashboardWithRequestBuilder(placementIds: placementIds, startDate: startDate, endDate: endDate, timezone: timezone, productIds: productIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /dashboard/metric/products
     - parameter placementIds: (query)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter timezone: (query)  
     - parameter productIds: (query)  (optional)
     - returns: RequestBuilder<FetchMetricsOnDashboardResponseDto> 
     */
    open class func dashboardControllerFetchMetricsOnProductDashboardWithRequestBuilder(placementIds: [String], startDate: Date, endDate: Date, timezone: Timezone_dashboardControllerFetchMetricsOnProductDashboard, productIds: [String]? = nil) -> RequestBuilder<FetchMetricsOnDashboardResponseDto> {
        let localVariablePath = "/dashboard/metric/products"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "productIds": (wrappedValue: productIds?.encodeToJSON(), isExplode: true),
            "placementIds": (wrappedValue: placementIds.encodeToJSON(), isExplode: true),
            "startDate": (wrappedValue: startDate.encodeToJSON(), isExplode: true),
            "endDate": (wrappedValue: endDate.encodeToJSON(), isExplode: true),
            "timezone": (wrappedValue: timezone.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FetchMetricsOnDashboardResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter timezone
     */
    public enum Timezone_dashboardControllerFetchMetricsOnSellerAdGroupDashboard: String, CaseIterable {
        case kst = "KST"
        case ict = "ICT"
        case est = "EST"
        case cst = "CST"
        case mst = "MST"
        case pst = "PST"
        case akst = "AKST"
        case hst = "HST"
    }

    /**

     - parameter campaignId: (path)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter timezone: (query)  
     - parameter adGroupIds: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func dashboardControllerFetchMetricsOnSellerAdGroupDashboard(campaignId: String, startDate: Date, endDate: Date, timezone: Timezone_dashboardControllerFetchMetricsOnSellerAdGroupDashboard, adGroupIds: [String]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: FetchMetricsOnSellerAdGroupDashboardResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return dashboardControllerFetchMetricsOnSellerAdGroupDashboardWithRequestBuilder(campaignId: campaignId, startDate: startDate, endDate: endDate, timezone: timezone, adGroupIds: adGroupIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /dashboard/campaigns/{campaignId}/ad-groups/metric
     - parameter campaignId: (path)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter timezone: (query)  
     - parameter adGroupIds: (query)  (optional)
     - returns: RequestBuilder<FetchMetricsOnSellerAdGroupDashboardResponseDto> 
     */
    open class func dashboardControllerFetchMetricsOnSellerAdGroupDashboardWithRequestBuilder(campaignId: String, startDate: Date, endDate: Date, timezone: Timezone_dashboardControllerFetchMetricsOnSellerAdGroupDashboard, adGroupIds: [String]? = nil) -> RequestBuilder<FetchMetricsOnSellerAdGroupDashboardResponseDto> {
        var localVariablePath = "/dashboard/campaigns/{campaignId}/ad-groups/metric"
        let campaignIdPreEscape = "\(APIHelper.mapValueToPathItem(campaignId))"
        let campaignIdPostEscape = campaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{campaignId}", with: campaignIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "adGroupIds": (wrappedValue: adGroupIds?.encodeToJSON(), isExplode: true),
            "startDate": (wrappedValue: startDate.encodeToJSON(), isExplode: true),
            "endDate": (wrappedValue: endDate.encodeToJSON(), isExplode: true),
            "timezone": (wrappedValue: timezone.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FetchMetricsOnSellerAdGroupDashboardResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
