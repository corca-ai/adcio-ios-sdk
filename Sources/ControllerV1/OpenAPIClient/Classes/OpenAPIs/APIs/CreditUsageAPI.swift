//
// CreditUsageAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CreditUsageAPI {

    /**

     - parameter year: (query)  
     - parameter month: (query)  
     - parameter keyword: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func creditUsageControllerExtractCsvFromCampaignsWithCreditUsed(year: Double, month: Double, keyword: String? = nil, limit: Double? = nil, offset: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ExtractCsvResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return creditUsageControllerExtractCsvFromCampaignsWithCreditUsedWithRequestBuilder(year: year, month: month, keyword: keyword, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /credit-usages/campaigns/in-month/csv
     - parameter year: (query)  
     - parameter month: (query)  
     - parameter keyword: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - returns: RequestBuilder<ExtractCsvResponseDto> 
     */
    open class func creditUsageControllerExtractCsvFromCampaignsWithCreditUsedWithRequestBuilder(year: Double, month: Double, keyword: String? = nil, limit: Double? = nil, offset: Double? = nil) -> RequestBuilder<ExtractCsvResponseDto> {
        let localVariablePath = "/credit-usages/campaigns/in-month/csv"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "keyword": (wrappedValue: keyword?.encodeToJSON(), isExplode: true),
            "year": (wrappedValue: year.encodeToJSON(), isExplode: true),
            "month": (wrappedValue: month.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExtractCsvResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter id: (path)  
     - parameter year: (query)  
     - parameter month: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func creditUsageControllerExtractCsvFromDailyCreditUsedPerAdGroup(id: String, year: Double, month: Double, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ExtractCsvResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return creditUsageControllerExtractCsvFromDailyCreditUsedPerAdGroupWithRequestBuilder(id: id, year: year, month: month).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /credit-usages/ad-groups/{id}/daily/csv
     - parameter id: (path)  
     - parameter year: (query)  
     - parameter month: (query)  
     - returns: RequestBuilder<ExtractCsvResponseDto> 
     */
    open class func creditUsageControllerExtractCsvFromDailyCreditUsedPerAdGroupWithRequestBuilder(id: String, year: Double, month: Double) -> RequestBuilder<ExtractCsvResponseDto> {
        var localVariablePath = "/credit-usages/ad-groups/{id}/daily/csv"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "year": (wrappedValue: year.encodeToJSON(), isExplode: true),
            "month": (wrappedValue: month.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExtractCsvResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter id: (path)  
     - parameter year: (query)  
     - parameter month: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func creditUsageControllerFetchAdGroupCampaignWithCreditUsedDto(id: String, year: Double, month: Double, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: FetchAdGroupCampaignWithCreditUsedResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return creditUsageControllerFetchAdGroupCampaignWithCreditUsedDtoWithRequestBuilder(id: id, year: year, month: month).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /credit-usages/ad-groups/{id}/with-campaign/in-month
     - parameter id: (path)  
     - parameter year: (query)  
     - parameter month: (query)  
     - returns: RequestBuilder<FetchAdGroupCampaignWithCreditUsedResponseDto> 
     */
    open class func creditUsageControllerFetchAdGroupCampaignWithCreditUsedDtoWithRequestBuilder(id: String, year: Double, month: Double) -> RequestBuilder<FetchAdGroupCampaignWithCreditUsedResponseDto> {
        var localVariablePath = "/credit-usages/ad-groups/{id}/with-campaign/in-month"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "year": (wrappedValue: year.encodeToJSON(), isExplode: true),
            "month": (wrappedValue: month.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FetchAdGroupCampaignWithCreditUsedResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter year: (query)  
     - parameter month: (query)  
     - parameter activated: (query)  (optional)
     - parameter keyword: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func creditUsageControllerFetchAdGroupsWithCreditUsed(year: Double, month: Double, activated: Bool? = nil, keyword: String? = nil, limit: Double? = nil, offset: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreditUsageControllerFetchAdGroupsWithCreditUsed200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return creditUsageControllerFetchAdGroupsWithCreditUsedWithRequestBuilder(year: year, month: month, activated: activated, keyword: keyword, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /credit-usages/ad-groups
     - parameter year: (query)  
     - parameter month: (query)  
     - parameter activated: (query)  (optional)
     - parameter keyword: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - returns: RequestBuilder<CreditUsageControllerFetchAdGroupsWithCreditUsed200Response> 
     */
    open class func creditUsageControllerFetchAdGroupsWithCreditUsedWithRequestBuilder(year: Double, month: Double, activated: Bool? = nil, keyword: String? = nil, limit: Double? = nil, offset: Double? = nil) -> RequestBuilder<CreditUsageControllerFetchAdGroupsWithCreditUsed200Response> {
        let localVariablePath = "/credit-usages/ad-groups"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "activated": (wrappedValue: activated?.encodeToJSON(), isExplode: true),
            "keyword": (wrappedValue: keyword?.encodeToJSON(), isExplode: true),
            "year": (wrappedValue: year.encodeToJSON(), isExplode: true),
            "month": (wrappedValue: month.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditUsageControllerFetchAdGroupsWithCreditUsed200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter id: (path)  
     - parameter year: (query)  
     - parameter month: (query)  
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func creditUsageControllerFetchAdGroupsWithCreditUsedInCampaign(id: String, year: Double, month: Double, limit: Double? = nil, offset: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreditUsageControllerFetchAdGroupsWithCreditUsedInCampaign200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return creditUsageControllerFetchAdGroupsWithCreditUsedInCampaignWithRequestBuilder(id: id, year: year, month: month, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /credit-usages/campaigns/{id}/ad-groups/in-month
     - parameter id: (path)  
     - parameter year: (query)  
     - parameter month: (query)  
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - returns: RequestBuilder<CreditUsageControllerFetchAdGroupsWithCreditUsedInCampaign200Response> 
     */
    open class func creditUsageControllerFetchAdGroupsWithCreditUsedInCampaignWithRequestBuilder(id: String, year: Double, month: Double, limit: Double? = nil, offset: Double? = nil) -> RequestBuilder<CreditUsageControllerFetchAdGroupsWithCreditUsedInCampaign200Response> {
        var localVariablePath = "/credit-usages/campaigns/{id}/ad-groups/in-month"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "year": (wrappedValue: year.encodeToJSON(), isExplode: true),
            "month": (wrappedValue: month.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditUsageControllerFetchAdGroupsWithCreditUsedInCampaign200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter id: (path)  
     - parameter year: (query)  
     - parameter month: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func creditUsageControllerFetchCampaignWithCreditUsed(id: String, year: Double, month: Double, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: FetchCampaignWithCreditUsedResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return creditUsageControllerFetchCampaignWithCreditUsedWithRequestBuilder(id: id, year: year, month: month).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /credit-usages/campaigns/{id}/in-month
     - parameter id: (path)  
     - parameter year: (query)  
     - parameter month: (query)  
     - returns: RequestBuilder<FetchCampaignWithCreditUsedResponseDto> 
     */
    open class func creditUsageControllerFetchCampaignWithCreditUsedWithRequestBuilder(id: String, year: Double, month: Double) -> RequestBuilder<FetchCampaignWithCreditUsedResponseDto> {
        var localVariablePath = "/credit-usages/campaigns/{id}/in-month"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "year": (wrappedValue: year.encodeToJSON(), isExplode: true),
            "month": (wrappedValue: month.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FetchCampaignWithCreditUsedResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter year: (query)  
     - parameter month: (query)  
     - parameter keyword: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func creditUsageControllerFetchCampaignsWithCreditUsed(year: Double, month: Double, keyword: String? = nil, limit: Double? = nil, offset: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreditUsageControllerFetchCampaignsWithCreditUsed200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return creditUsageControllerFetchCampaignsWithCreditUsedWithRequestBuilder(year: year, month: month, keyword: keyword, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /credit-usages/campaigns/in-month
     - parameter year: (query)  
     - parameter month: (query)  
     - parameter keyword: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - returns: RequestBuilder<CreditUsageControllerFetchCampaignsWithCreditUsed200Response> 
     */
    open class func creditUsageControllerFetchCampaignsWithCreditUsedWithRequestBuilder(year: Double, month: Double, keyword: String? = nil, limit: Double? = nil, offset: Double? = nil) -> RequestBuilder<CreditUsageControllerFetchCampaignsWithCreditUsed200Response> {
        let localVariablePath = "/credit-usages/campaigns/in-month"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "keyword": (wrappedValue: keyword?.encodeToJSON(), isExplode: true),
            "year": (wrappedValue: year.encodeToJSON(), isExplode: true),
            "month": (wrappedValue: month.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditUsageControllerFetchCampaignsWithCreditUsed200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter year: (query)  
     - parameter month: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func creditUsageControllerFetchCreditUsedSum(year: Double, month: Double, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: FetchCreditUsedSumResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return creditUsageControllerFetchCreditUsedSumWithRequestBuilder(year: year, month: month).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /credit-usages/sum/in-month
     - parameter year: (query)  
     - parameter month: (query)  
     - returns: RequestBuilder<FetchCreditUsedSumResponseDto> 
     */
    open class func creditUsageControllerFetchCreditUsedSumWithRequestBuilder(year: Double, month: Double) -> RequestBuilder<FetchCreditUsedSumResponseDto> {
        let localVariablePath = "/credit-usages/sum/in-month"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "year": (wrappedValue: year.encodeToJSON(), isExplode: true),
            "month": (wrappedValue: month.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FetchCreditUsedSumResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter id: (path)  
     - parameter year: (query)  
     - parameter month: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func creditUsageControllerFetchDailyCreditUsedPerAdGroup(id: String, year: Double, month: Double, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DailyCreditUsedPerAdGroupResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return creditUsageControllerFetchDailyCreditUsedPerAdGroupWithRequestBuilder(id: id, year: year, month: month).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /credit-usages/ad-groups/{id}/daily
     - parameter id: (path)  
     - parameter year: (query)  
     - parameter month: (query)  
     - returns: RequestBuilder<DailyCreditUsedPerAdGroupResponseDto> 
     */
    open class func creditUsageControllerFetchDailyCreditUsedPerAdGroupWithRequestBuilder(id: String, year: Double, month: Double) -> RequestBuilder<DailyCreditUsedPerAdGroupResponseDto> {
        var localVariablePath = "/credit-usages/ad-groups/{id}/daily"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "year": (wrappedValue: year.encodeToJSON(), isExplode: true),
            "month": (wrappedValue: month.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DailyCreditUsedPerAdGroupResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
