//
// ClientAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ClientAPI {

    /**

     - parameter licenseNumber: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func businessLicenseControllerFetchByLicenseNumber(licenseNumber: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [FetchByLicenseNumberResponseDto]?, _ error: Error?) -> Void)) -> RequestTask {
        return businessLicenseControllerFetchByLicenseNumberWithRequestBuilder(licenseNumber: licenseNumber).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /business-licenses
     - parameter licenseNumber: (query)  
     - returns: RequestBuilder<[FetchByLicenseNumberResponseDto]> 
     */
    open class func businessLicenseControllerFetchByLicenseNumberWithRequestBuilder(licenseNumber: String) -> RequestBuilder<[FetchByLicenseNumberResponseDto]> {
        let localVariablePath = "/business-licenses"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "licenseNumber": (wrappedValue: licenseNumber.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[FetchByLicenseNumberResponseDto]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func businessLicenseControllerGenerateUploadLink(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GenerateUploadLinkResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return businessLicenseControllerGenerateUploadLinkWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /business-licenses/license-upload-link
     - returns: RequestBuilder<GenerateUploadLinkResponseDto> 
     */
    open class func businessLicenseControllerGenerateUploadLinkWithRequestBuilder() -> RequestBuilder<GenerateUploadLinkResponseDto> {
        let localVariablePath = "/business-licenses/license-upload-link"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenerateUploadLinkResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func businessLicenseControllerInspect(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return businessLicenseControllerInspectWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /business-licenses/inspect
     - returns: RequestBuilder<Void> 
     */
    open class func businessLicenseControllerInspectWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/business-licenses/inspect"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter createBusinessLicenseDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func clientControllerCreateBusinessLicense(createBusinessLicenseDto: CreateBusinessLicenseDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreateBusinessLicenseResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return clientControllerCreateBusinessLicenseWithRequestBuilder(createBusinessLicenseDto: createBusinessLicenseDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /clients/me/business-licenses
     - parameter createBusinessLicenseDto: (body)  
     - returns: RequestBuilder<CreateBusinessLicenseResponseDto> 
     */
    open class func clientControllerCreateBusinessLicenseWithRequestBuilder(createBusinessLicenseDto: CreateBusinessLicenseDto) -> RequestBuilder<CreateBusinessLicenseResponseDto> {
        let localVariablePath = "/clients/me/business-licenses"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createBusinessLicenseDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateBusinessLicenseResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter createSellerDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func clientControllerCreateSeller(createSellerDto: CreateSellerDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreateSellerResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return clientControllerCreateSellerWithRequestBuilder(createSellerDto: createSellerDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /clients/sellers
     - parameter createSellerDto: (body)  
     - returns: RequestBuilder<CreateSellerResponseDto> 
     */
    open class func clientControllerCreateSellerWithRequestBuilder(createSellerDto: CreateSellerDto) -> RequestBuilder<CreateSellerResponseDto> {
        let localVariablePath = "/clients/sellers"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createSellerDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateSellerResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter createUserDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func clientControllerCreateUser(createUserDto: CreateUserDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: User?, _ error: Error?) -> Void)) -> RequestTask {
        return clientControllerCreateUserWithRequestBuilder(createUserDto: createUserDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /clients/me/users
     - parameter createUserDto: (body)  
     - returns: RequestBuilder<User> 
     */
    open class func clientControllerCreateUserWithRequestBuilder(createUserDto: CreateUserDto) -> RequestBuilder<User> {
        let localVariablePath = "/clients/me/users"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createUserDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<User>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func clientControllerFetchClient(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: FetchClientResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return clientControllerFetchClientWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /clients/me
     - returns: RequestBuilder<FetchClientResponseDto> 
     */
    open class func clientControllerFetchClientWithRequestBuilder() -> RequestBuilder<FetchClientResponseDto> {
        let localVariablePath = "/clients/me"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FetchClientResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter role
     */
    public enum Role_clientControllerFetchClientUsers: Double, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
    }

    /**

     - parameter id: (path)  
     - parameter orderBy: (query) UserSortOption (optional)
     - parameter role: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func clientControllerFetchClientUsers(id: String, orderBy: [String]? = nil, role: Role_clientControllerFetchClientUsers? = nil, limit: Double? = nil, offset: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ClientControllerFetchClientUsers200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return clientControllerFetchClientUsersWithRequestBuilder(id: id, orderBy: orderBy, role: role, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /clients/{id}/users
     - parameter id: (path)  
     - parameter orderBy: (query) UserSortOption (optional)
     - parameter role: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - returns: RequestBuilder<ClientControllerFetchClientUsers200Response> 
     */
    open class func clientControllerFetchClientUsersWithRequestBuilder(id: String, orderBy: [String]? = nil, role: Role_clientControllerFetchClientUsers? = nil, limit: Double? = nil, offset: Double? = nil) -> RequestBuilder<ClientControllerFetchClientUsers200Response> {
        var localVariablePath = "/clients/{id}/users"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "orderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "role": (wrappedValue: role?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ClientControllerFetchClientUsers200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func clientControllerFetchSeller(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: FetchSellerResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return clientControllerFetchSellerWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /clients/sellers/{id}
     - parameter id: (path)  
     - returns: RequestBuilder<FetchSellerResponseDto> 
     */
    open class func clientControllerFetchSellerWithRequestBuilder(id: String) -> RequestBuilder<FetchSellerResponseDto> {
        var localVariablePath = "/clients/sellers/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FetchSellerResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter statuses
     */
    public enum Statuses_clientControllerFetchSellers: String, CaseIterable {
        case invited = "INVITED"
        case verifying = "VERIFYING"
        case verified = "VERIFIED"
        case withdrawn = "WITHDRAWN"
    }

    /**

     - parameter orderBy: (query) SellerSortOption (optional)
     - parameter statuses: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func clientControllerFetchSellers(orderBy: [String]? = nil, statuses: [Statuses_clientControllerFetchSellers]? = nil, limit: Double? = nil, offset: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ClientControllerFetchSellers200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return clientControllerFetchSellersWithRequestBuilder(orderBy: orderBy, statuses: statuses, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /clients/sellers
     - parameter orderBy: (query) SellerSortOption (optional)
     - parameter statuses: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - returns: RequestBuilder<ClientControllerFetchSellers200Response> 
     */
    open class func clientControllerFetchSellersWithRequestBuilder(orderBy: [String]? = nil, statuses: [Statuses_clientControllerFetchSellers]? = nil, limit: Double? = nil, offset: Double? = nil) -> RequestBuilder<ClientControllerFetchSellers200Response> {
        let localVariablePath = "/clients/sellers"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "orderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "statuses": (wrappedValue: statuses?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ClientControllerFetchSellers200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter inviteSellerDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func clientControllerInviteSeller(inviteSellerDto: InviteSellerDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InviteSellerResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return clientControllerInviteSellerWithRequestBuilder(inviteSellerDto: inviteSellerDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /clients/me/sellers
     - parameter inviteSellerDto: (body)  
     - returns: RequestBuilder<InviteSellerResponseDto> 
     */
    open class func clientControllerInviteSellerWithRequestBuilder(inviteSellerDto: InviteSellerDto) -> RequestBuilder<InviteSellerResponseDto> {
        let localVariablePath = "/clients/me/sellers"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inviteSellerDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InviteSellerResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter email: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func clientControllerRemoveUser(email: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return clientControllerRemoveUserWithRequestBuilder(email: email).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /clients/me/users/{email}
     - parameter email: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func clientControllerRemoveUserWithRequestBuilder(email: String) -> RequestBuilder<Void> {
        var localVariablePath = "/clients/me/users/{email}"
        let emailPreEscape = "\(APIHelper.mapValueToPathItem(email))"
        let emailPostEscape = emailPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{email}", with: emailPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func clientControllerResendInvitation(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return clientControllerResendInvitationWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /clients/me/sellers/{id}/invitation/mail
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func clientControllerResendInvitationWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/clients/me/sellers/{id}/invitation/mail"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func clientControllerSearchSellers(name: String? = nil, limit: Double? = nil, offset: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ClientControllerSearchSellers200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return clientControllerSearchSellersWithRequestBuilder(name: name, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /clients/sellers/all/names
     - BASIC:
       - type: http
       - name: accessToken
     - parameter name: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - returns: RequestBuilder<ClientControllerSearchSellers200Response> 
     */
    open class func clientControllerSearchSellersWithRequestBuilder(name: String? = nil, limit: Double? = nil, offset: Double? = nil) -> RequestBuilder<ClientControllerSearchSellers200Response> {
        let localVariablePath = "/clients/sellers/all/names"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ClientControllerSearchSellers200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter setupDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func clientControllerSetup(setupDto: SetupDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Client?, _ error: Error?) -> Void)) -> RequestTask {
        return clientControllerSetupWithRequestBuilder(setupDto: setupDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /clients
     - parameter setupDto: (body)  
     - returns: RequestBuilder<Client> 
     */
    open class func clientControllerSetupWithRequestBuilder(setupDto: SetupDto) -> RequestBuilder<Client> {
        let localVariablePath = "/clients"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setupDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Client>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func clientControllerUpdateClientIsStore(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return clientControllerUpdateClientIsStoreWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /clients/me/store
     - returns: RequestBuilder<Void> 
     */
    open class func clientControllerUpdateClientIsStoreWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/clients/me/store"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter email: (path)  
     - parameter updateUserDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func clientControllerUpdateUser(email: String, updateUserDto: UpdateUserDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return clientControllerUpdateUserWithRequestBuilder(email: email, updateUserDto: updateUserDto).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /clients/me/users/{email}
     - parameter email: (path)  
     - parameter updateUserDto: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func clientControllerUpdateUserWithRequestBuilder(email: String, updateUserDto: UpdateUserDto) -> RequestBuilder<Void> {
        var localVariablePath = "/clients/me/users/{email}"
        let emailPreEscape = "\(APIHelper.mapValueToPathItem(email))"
        let emailPostEscape = emailPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{email}", with: emailPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateUserDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter verifyUserDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func clientControllerVerifyUser(verifyUserDto: VerifyUserDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VerifyUserResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return clientControllerVerifyUserWithRequestBuilder(verifyUserDto: verifyUserDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /clients/users/verify
     - parameter verifyUserDto: (body)  
     - returns: RequestBuilder<VerifyUserResponseDto> 
     */
    open class func clientControllerVerifyUserWithRequestBuilder(verifyUserDto: VerifyUserDto) -> RequestBuilder<VerifyUserResponseDto> {
        let localVariablePath = "/clients/users/verify"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: verifyUserDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VerifyUserResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter withdrawClientDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func clientControllerWithdrawClient(withdrawClientDto: WithdrawClientDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Client?, _ error: Error?) -> Void)) -> RequestTask {
        return clientControllerWithdrawClientWithRequestBuilder(withdrawClientDto: withdrawClientDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /clients/me/withdrawal
     - parameter withdrawClientDto: (body)  
     - returns: RequestBuilder<Client> 
     */
    open class func clientControllerWithdrawClientWithRequestBuilder(withdrawClientDto: WithdrawClientDto) -> RequestBuilder<Client> {
        let localVariablePath = "/clients/me/withdrawal"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: withdrawClientDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Client>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter createSellerCreditDecreaseRequestDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func creditControllerCreateSellerCreditDecreaseRequest(createSellerCreditDecreaseRequestDto: CreateSellerCreditDecreaseRequestDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreditDecreaseRequest?, _ error: Error?) -> Void)) -> RequestTask {
        return creditControllerCreateSellerCreditDecreaseRequestWithRequestBuilder(createSellerCreditDecreaseRequestDto: createSellerCreditDecreaseRequestDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /credits/decrease-requests
     - parameter createSellerCreditDecreaseRequestDto: (body)  
     - returns: RequestBuilder<CreditDecreaseRequest> 
     */
    open class func creditControllerCreateSellerCreditDecreaseRequestWithRequestBuilder(createSellerCreditDecreaseRequestDto: CreateSellerCreditDecreaseRequestDto) -> RequestBuilder<CreditDecreaseRequest> {
        let localVariablePath = "/credits/decrease-requests"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createSellerCreditDecreaseRequestDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditDecreaseRequest>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter decreaseRequestId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func creditControllerDeleteSellerCreditDecreaseRequest(decreaseRequestId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return creditControllerDeleteSellerCreditDecreaseRequestWithRequestBuilder(decreaseRequestId: decreaseRequestId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /credits/decrease-requests/{decreaseRequestId}
     - parameter decreaseRequestId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func creditControllerDeleteSellerCreditDecreaseRequestWithRequestBuilder(decreaseRequestId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/credits/decrease-requests/{decreaseRequestId}"
        let decreaseRequestIdPreEscape = "\(APIHelper.mapValueToPathItem(decreaseRequestId))"
        let decreaseRequestIdPostEscape = decreaseRequestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{decreaseRequestId}", with: decreaseRequestIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func creditControllerFetchAvailableCredit(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: FetchAvailableCreditResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return creditControllerFetchAvailableCreditWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /credits/available
     - returns: RequestBuilder<FetchAvailableCreditResponseDto> 
     */
    open class func creditControllerFetchAvailableCreditWithRequestBuilder() -> RequestBuilder<FetchAvailableCreditResponseDto> {
        let localVariablePath = "/credits/available"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FetchAvailableCreditResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter adjustmentType
     */
    public enum AdjustmentType_creditControllerFetchCreditHistory: String, CaseIterable {
        case increase = "INCREASE"
        case decrease = "DECREASE"
    }

    /**

     - parameter adjustmentType: (query)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter orderBy: (query) CreditHistorySortOption (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func creditControllerFetchCreditHistory(adjustmentType: AdjustmentType_creditControllerFetchCreditHistory, startDate: Date, endDate: Date, orderBy: [String]? = nil, limit: Double? = nil, offset: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreditControllerFetchCreditHistory200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return creditControllerFetchCreditHistoryWithRequestBuilder(adjustmentType: adjustmentType, startDate: startDate, endDate: endDate, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /credits/histories
     - parameter adjustmentType: (query)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter orderBy: (query) CreditHistorySortOption (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - returns: RequestBuilder<CreditControllerFetchCreditHistory200Response> 
     */
    open class func creditControllerFetchCreditHistoryWithRequestBuilder(adjustmentType: AdjustmentType_creditControllerFetchCreditHistory, startDate: Date, endDate: Date, orderBy: [String]? = nil, limit: Double? = nil, offset: Double? = nil) -> RequestBuilder<CreditControllerFetchCreditHistory200Response> {
        let localVariablePath = "/credits/histories"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "orderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "adjustmentType": (wrappedValue: adjustmentType.encodeToJSON(), isExplode: true),
            "startDate": (wrappedValue: startDate.encodeToJSON(), isExplode: true),
            "endDate": (wrappedValue: endDate.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditControllerFetchCreditHistory200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func creditControllerFetchCreditInfo(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreditInfoResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return creditControllerFetchCreditInfoWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /credits
     - returns: RequestBuilder<CreditInfoResponseDto> 
     */
    open class func creditControllerFetchCreditInfoWithRequestBuilder() -> RequestBuilder<CreditInfoResponseDto> {
        let localVariablePath = "/credits"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditInfoResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter orderBy: (query) DecreaseRequestSortOption (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func creditControllerFetchManyMyDecreaseRequest(startDate: Date, endDate: Date, orderBy: [String]? = nil, limit: Double? = nil, offset: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreditControllerFetchManyMyDecreaseRequest200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return creditControllerFetchManyMyDecreaseRequestWithRequestBuilder(startDate: startDate, endDate: endDate, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /credits/sellers/decrease-requests
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter orderBy: (query) DecreaseRequestSortOption (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - returns: RequestBuilder<CreditControllerFetchManyMyDecreaseRequest200Response> 
     */
    open class func creditControllerFetchManyMyDecreaseRequestWithRequestBuilder(startDate: Date, endDate: Date, orderBy: [String]? = nil, limit: Double? = nil, offset: Double? = nil) -> RequestBuilder<CreditControllerFetchManyMyDecreaseRequest200Response> {
        let localVariablePath = "/credits/sellers/decrease-requests"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "orderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "startDate": (wrappedValue: startDate.encodeToJSON(), isExplode: true),
            "endDate": (wrappedValue: endDate.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditControllerFetchManyMyDecreaseRequest200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter status: (query)  (optional)
     - parameter orderBy: (query) SellerCreditDecreaseRequestSortOption (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func creditControllerFetchManySellerCreditDecreaseRequest(status: CreditDecreaseRequestStatus? = nil, orderBy: [String]? = nil, limit: Double? = nil, offset: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreditControllerFetchManySellerCreditDecreaseRequest200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return creditControllerFetchManySellerCreditDecreaseRequestWithRequestBuilder(status: status, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /credits/decrease-requests
     - parameter status: (query)  (optional)
     - parameter orderBy: (query) SellerCreditDecreaseRequestSortOption (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - returns: RequestBuilder<CreditControllerFetchManySellerCreditDecreaseRequest200Response> 
     */
    open class func creditControllerFetchManySellerCreditDecreaseRequestWithRequestBuilder(status: CreditDecreaseRequestStatus? = nil, orderBy: [String]? = nil, limit: Double? = nil, offset: Double? = nil) -> RequestBuilder<CreditControllerFetchManySellerCreditDecreaseRequest200Response> {
        let localVariablePath = "/credits/decrease-requests"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "status": (wrappedValue: status?.encodeToJSON(), isExplode: true),
            "orderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditControllerFetchManySellerCreditDecreaseRequest200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter orderBy: (query) SellerCreditInfoSortOption (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func creditControllerFetchManySellerCreditInfo(orderBy: [String]? = nil, limit: Double? = nil, offset: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreditControllerFetchManySellerCreditInfo200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return creditControllerFetchManySellerCreditInfoWithRequestBuilder(orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /credits/sellers
     - parameter orderBy: (query) SellerCreditInfoSortOption (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - returns: RequestBuilder<CreditControllerFetchManySellerCreditInfo200Response> 
     */
    open class func creditControllerFetchManySellerCreditInfoWithRequestBuilder(orderBy: [String]? = nil, limit: Double? = nil, offset: Double? = nil) -> RequestBuilder<CreditControllerFetchManySellerCreditInfo200Response> {
        let localVariablePath = "/credits/sellers"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "orderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditControllerFetchManySellerCreditInfo200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter status: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func creditControllerFetchSellerCreditDecreaseRequestCount(status: CreditDecreaseRequestStatus? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: FetchSellerCreditDecreaseRequestCountResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return creditControllerFetchSellerCreditDecreaseRequestCountWithRequestBuilder(status: status).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /credits/sellers/decrease-requests/count
     - parameter status: (query)  (optional)
     - returns: RequestBuilder<FetchSellerCreditDecreaseRequestCountResponseDto> 
     */
    open class func creditControllerFetchSellerCreditDecreaseRequestCountWithRequestBuilder(status: CreditDecreaseRequestStatus? = nil) -> RequestBuilder<FetchSellerCreditDecreaseRequestCountResponseDto> {
        let localVariablePath = "/credits/sellers/decrease-requests/count"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "status": (wrappedValue: status?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FetchSellerCreditDecreaseRequestCountResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter sellerId: (path)  
     - parameter creditType: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func creditControllerFetchSellerCreditUpdateHistory(sellerId: String, creditType: CreditType? = nil, limit: Double? = nil, offset: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreditControllerFetchSellerCreditUpdateHistory200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return creditControllerFetchSellerCreditUpdateHistoryWithRequestBuilder(sellerId: sellerId, creditType: creditType, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /credits/sellers/{sellerId}/histories
     - parameter sellerId: (path)  
     - parameter creditType: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - returns: RequestBuilder<CreditControllerFetchSellerCreditUpdateHistory200Response> 
     */
    open class func creditControllerFetchSellerCreditUpdateHistoryWithRequestBuilder(sellerId: String, creditType: CreditType? = nil, limit: Double? = nil, offset: Double? = nil) -> RequestBuilder<CreditControllerFetchSellerCreditUpdateHistory200Response> {
        var localVariablePath = "/credits/sellers/{sellerId}/histories"
        let sellerIdPreEscape = "\(APIHelper.mapValueToPathItem(sellerId))"
        let sellerIdPostEscape = sellerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sellerId}", with: sellerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "creditType": (wrappedValue: creditType?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditControllerFetchSellerCreditUpdateHistory200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter sellerId: (path)  
     - parameter increaseSellerCreditDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func creditControllerIncreaseSellerCredit(sellerId: String, increaseSellerCreditDto: IncreaseSellerCreditDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return creditControllerIncreaseSellerCreditWithRequestBuilder(sellerId: sellerId, increaseSellerCreditDto: increaseSellerCreditDto).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /credits/sellers/{sellerId}
     - parameter sellerId: (path)  
     - parameter increaseSellerCreditDto: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func creditControllerIncreaseSellerCreditWithRequestBuilder(sellerId: String, increaseSellerCreditDto: IncreaseSellerCreditDto) -> RequestBuilder<Void> {
        var localVariablePath = "/credits/sellers/{sellerId}"
        let sellerIdPreEscape = "\(APIHelper.mapValueToPathItem(sellerId))"
        let sellerIdPostEscape = sellerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sellerId}", with: sellerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: increaseSellerCreditDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter decreaseRequestId: (path)  
     - parameter processSellerCreditDecreaseRequestDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func creditControllerProcessSellerCreditDecreaseRequest(decreaseRequestId: String, processSellerCreditDecreaseRequestDto: ProcessSellerCreditDecreaseRequestDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return creditControllerProcessSellerCreditDecreaseRequestWithRequestBuilder(decreaseRequestId: decreaseRequestId, processSellerCreditDecreaseRequestDto: processSellerCreditDecreaseRequestDto).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /credits/decrease-requests/{decreaseRequestId}
     - parameter decreaseRequestId: (path)  
     - parameter processSellerCreditDecreaseRequestDto: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func creditControllerProcessSellerCreditDecreaseRequestWithRequestBuilder(decreaseRequestId: String, processSellerCreditDecreaseRequestDto: ProcessSellerCreditDecreaseRequestDto) -> RequestBuilder<Void> {
        var localVariablePath = "/credits/decrease-requests/{decreaseRequestId}"
        let decreaseRequestIdPreEscape = "\(APIHelper.mapValueToPathItem(decreaseRequestId))"
        let decreaseRequestIdPostEscape = decreaseRequestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{decreaseRequestId}", with: decreaseRequestIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: processSellerCreditDecreaseRequestDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter upsertPaymentCardDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func paymentCardControllerUpsert(upsertPaymentCardDto: UpsertPaymentCardDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaymentCard?, _ error: Error?) -> Void)) -> RequestTask {
        return paymentCardControllerUpsertWithRequestBuilder(upsertPaymentCardDto: upsertPaymentCardDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /payment-cards
     - BASIC:
       - type: http
       - name: accessToken
     - parameter upsertPaymentCardDto: (body)  
     - returns: RequestBuilder<PaymentCard> 
     */
    open class func paymentCardControllerUpsertWithRequestBuilder(upsertPaymentCardDto: UpsertPaymentCardDto) -> RequestBuilder<PaymentCard> {
        let localVariablePath = "/payment-cards"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: upsertPaymentCardDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaymentCard>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter licenseNumber: (query)  
     - parameter sellerIdOnStore: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sellerInvitationControllerCheckExistence(licenseNumber: String, sellerIdOnStore: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SellerInvitationExistenceResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return sellerInvitationControllerCheckExistenceWithRequestBuilder(licenseNumber: licenseNumber, sellerIdOnStore: sellerIdOnStore).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /seller-invitations/existence
     - parameter licenseNumber: (query)  
     - parameter sellerIdOnStore: (query)  
     - returns: RequestBuilder<SellerInvitationExistenceResponseDto> 
     */
    open class func sellerInvitationControllerCheckExistenceWithRequestBuilder(licenseNumber: String, sellerIdOnStore: String) -> RequestBuilder<SellerInvitationExistenceResponseDto> {
        let localVariablePath = "/seller-invitations/existence"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "licenseNumber": (wrappedValue: licenseNumber.encodeToJSON(), isExplode: true),
            "sellerIdOnStore": (wrappedValue: sellerIdOnStore.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SellerInvitationExistenceResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
