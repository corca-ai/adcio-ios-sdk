//
// BannerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class BannerAPI {

    /**

     - parameter createBannerDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func bannerControllerCreate(createBannerDto: CreateBannerDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Banner?, _ error: Error?) -> Void)) -> RequestTask {
        return bannerControllerCreateWithRequestBuilder(createBannerDto: createBannerDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /banners
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: api-key
     - parameter createBannerDto: (body)  
     - returns: RequestBuilder<Banner> 
     */
    open class func bannerControllerCreateWithRequestBuilder(createBannerDto: CreateBannerDto) -> RequestBuilder<Banner> {
        let localVariablePath = "/banners"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createBannerDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Banner>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func bannerControllerDelete(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return bannerControllerDeleteWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /banners/{id}
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: api-key
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func bannerControllerDeleteWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/banners/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter select
     */
    public enum Select_bannerControllerFetchMany: String, CaseIterable {
        case id = "id"
        case name = "name"
        case imageurl = "imageUrl"
        case url = "url"
        case data = "data"
        case activated = "activated"
        case startsat = "startsAt"
        case endsat = "endsAt"
        case createdat = "createdAt"
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_bannerControllerFetchMany: String, CaseIterable {
        case video = "video"
        case image = "image"
    }

    /**

     - parameter orderBy: (query) BannerSortOption (optional)
     - parameter select: (query)  (optional)
     - parameter activated: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter placementIds: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter startsAt: (query)  (optional)
     - parameter endsAt: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func bannerControllerFetchMany(orderBy: [String]? = nil, select: [Select_bannerControllerFetchMany]? = nil, activated: Bool? = nil, name: String? = nil, placementIds: [String]? = nil, type: ModelType_bannerControllerFetchMany? = nil, startsAt: Date? = nil, endsAt: Date? = nil, limit: Double? = nil, offset: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BannerControllerFetchMany200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return bannerControllerFetchManyWithRequestBuilder(orderBy: orderBy, select: select, activated: activated, name: name, placementIds: placementIds, type: type, startsAt: startsAt, endsAt: endsAt, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /banners
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: api-key
     - parameter orderBy: (query) BannerSortOption (optional)
     - parameter select: (query)  (optional)
     - parameter activated: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter placementIds: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter startsAt: (query)  (optional)
     - parameter endsAt: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - returns: RequestBuilder<BannerControllerFetchMany200Response> 
     */
    open class func bannerControllerFetchManyWithRequestBuilder(orderBy: [String]? = nil, select: [Select_bannerControllerFetchMany]? = nil, activated: Bool? = nil, name: String? = nil, placementIds: [String]? = nil, type: ModelType_bannerControllerFetchMany? = nil, startsAt: Date? = nil, endsAt: Date? = nil, limit: Double? = nil, offset: Double? = nil) -> RequestBuilder<BannerControllerFetchMany200Response> {
        let localVariablePath = "/banners"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "orderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "select": (wrappedValue: select?.encodeToJSON(), isExplode: true),
            "activated": (wrappedValue: activated?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "placementIds": (wrappedValue: placementIds?.encodeToJSON(), isExplode: true),
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "startsAt": (wrappedValue: startsAt?.encodeToJSON(), isExplode: true),
            "endsAt": (wrappedValue: endsAt?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BannerControllerFetchMany200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func bannerControllerFetchOne(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: FetchBannerResponseDto?, _ error: Error?) -> Void)) -> RequestTask {
        return bannerControllerFetchOneWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /banners/{id}
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: api-key
     - parameter id: (path)  
     - returns: RequestBuilder<FetchBannerResponseDto> 
     */
    open class func bannerControllerFetchOneWithRequestBuilder(id: String) -> RequestBuilder<FetchBannerResponseDto> {
        var localVariablePath = "/banners/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FetchBannerResponseDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter updateBannerDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func bannerControllerUpdate(id: String, updateBannerDto: UpdateBannerDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Banner?, _ error: Error?) -> Void)) -> RequestTask {
        return bannerControllerUpdateWithRequestBuilder(id: id, updateBannerDto: updateBannerDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /banners/{id}
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: api-key
     - parameter id: (path)  
     - parameter updateBannerDto: (body)  
     - returns: RequestBuilder<Banner> 
     */
    open class func bannerControllerUpdateWithRequestBuilder(id: String, updateBannerDto: UpdateBannerDto) -> RequestBuilder<Banner> {
        var localVariablePath = "/banners/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateBannerDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Banner>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
