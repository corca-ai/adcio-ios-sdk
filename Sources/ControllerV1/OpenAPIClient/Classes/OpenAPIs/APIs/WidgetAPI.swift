//
// WidgetAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class WidgetAPI {

    /**
     * enum for parameter placementType
     */
    public enum PlacementType_widgetControllerFetchManyWidgets: String, CaseIterable {
        case grid = "GRID"
        case banner = "BANNER"
    }

    /**

     - parameter placementType: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func widgetControllerFetchManyWidgets(placementType: PlacementType_widgetControllerFetchManyWidgets, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: WidgetControllerFetchManyWidgets200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return widgetControllerFetchManyWidgetsWithRequestBuilder(placementType: placementType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /widgets
     - parameter placementType: (query)  
     - returns: RequestBuilder<WidgetControllerFetchManyWidgets200Response> 
     */
    open class func widgetControllerFetchManyWidgetsWithRequestBuilder(placementType: PlacementType_widgetControllerFetchManyWidgets) -> RequestBuilder<WidgetControllerFetchManyWidgets200Response> {
        let localVariablePath = "/widgets"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "placementType": (wrappedValue: placementType.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WidgetControllerFetchManyWidgets200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func widgetControllerFetchOneWidget(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Widget?, _ error: Error?) -> Void)) -> RequestTask {
        return widgetControllerFetchOneWidgetWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /widgets/{id}
     - parameter id: (path)  
     - returns: RequestBuilder<Widget> 
     */
    open class func widgetControllerFetchOneWidgetWithRequestBuilder(id: String) -> RequestBuilder<Widget> {
        var localVariablePath = "/widgets/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Widget>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
